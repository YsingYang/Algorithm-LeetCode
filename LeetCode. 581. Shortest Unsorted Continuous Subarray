class Solution {
/**
 * 通过o(NlogN)方法获得相应的结果, 这个也为最简单的方法, 通过比较排序的序列与原序列不相同的头尾点来判断
 * Shortest Unsorted Continuous Subarray,
 */
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> sorted;
        copy(nums.begin(), nums.end(), back_inserter(sorted));
        sort(sorted.begin(), sorted.end());
        int start = -1, end = -1;
        for(int i = 0; i < nums.size(); ++i){
            if(sorted[i] != nums[i]){
                start = i;
                break;
            }
        }
        if(start == -1)
            return 0;
        for(int i = nums.size()-1; i >= 0; --i){
            if(sorted[i] != nums[i]){
                end = i;
                break;
            }
        }
        return end - start + 1;
    }
};

class Solution {
/**
 * 选择排序,但是更慢,最坏时间复杂度为O(n^2)
 */
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int start = -1, sMin = INT_MAX, end = -1, endMin = INT_MIN;
        for(int i = 0 ; i < nums.size(); ++i){
            sMin = nums[i];
            for(int j = i + 1; j < nums.size(); ++j){
                if(nums[j] < nums[i]){
                    start = i;
                    break;
                }
            }
            if(start != -1)
                break;
        }
        if(start == -1)
            return 0;
        for(int i = nums.size() - 1; i >= 0; --i){
            endMin = nums[i];
            for(int j = i - 1; j >= 0; --j){
                if(nums[j] > nums[i]){
                    end = i;
                    break;
                }
            }
            if(end != -1)
                break;
        }
        //cout<<start<<"  "<<end<<endl;
        return end - start + 1;
    }
};


class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int size = nums.size();
        vector<int> rhs(size), lhs(size);
        //查看从右到左的递减序列, 如果非递减取两者最小值
        for(int i = size - 1, minVal = INT_MAX; i >=0; --i){
            rhs[i] = minVal = min(minVal, nums[i]);
        }
        //查看从左到右递增序列, 如果非递增取两者最大值
        for(int i = 0, maxVal = INT_MIN; i < size; ++i){
            lhs[i] = maxVal = max(maxVal, nums[i]);
        }
        
        int start = 0, end = size - 1;
        //注意start与rhs比, 因为是取的小值
        while(start < size && nums[start] <= rhs[start]){
            ++start;
        }
        //注意end与lhs比, 取的是大值
        while(end >= start && nums[end] >= lhs[end]){
            --end;
        }
        return end - start + 1;
        
    }
};
