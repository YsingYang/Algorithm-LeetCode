//My solution
class Solution {
public:
    vector<string> generatePalindromes(string s) {
        vector<string> res;
        vector<int> hash(128);
        if(!canPermutePalindrome(s,hash))
            return res;
        int single = 128;
        string PldString;
        for(int i=0;i<128;++i){
            if(hash[i]&1){
                single = (int)i;
            }
            for(int j=0;j<(hash[i]>>1);++j){
                PldString+=(char)i;
            }
        }
        unordered_set<string> visited;
        backtrack(res,PldString,0,single,visited);
        return res;
        
    }
    
    void backtrack(vector<string> &res,string &s,int index,const int &single,unordered_set<string> &visited){
        if(index == s.size()&&visited.find(s)==visited.end()){
            //cout<<s<<endl;
            string rear = s;
            reverse(rear.begin(),rear.end());
            visited.insert(s);
            if(single==128){
                res.push_back(s+rear);
            }
            else{
                res.push_back(s+(char)(single)+rear);
            }
            return;
        }
        for(int i=index;i<s.size();++i){
            swap(s[index],s[i]);
            backtrack(res,s,index+1,single,visited);
            swap(s[index],s[i]);
        }
    }
    
    bool canPermutePalindrome(string s,vector<int> &hash) {
        int oddCnt=0;
        for(int i=0;i<s.size();++i){
            if((++hash[s[i]])&1!=0)
                ++oddCnt;
            else
                --oddCnt;
        }
        return oddCnt<=1;
    }
};

//@jianchao.li.fighter
class Solution {
public:
    vector<string> generatePalindromes(string s) {
		vector<string> palindromes;
        unordered_map<char, int> counts;
        for (char c : s) counts[c]++;
        int odd = 0; char mid; string half;
        for (auto p : counts) {
            if (p.second & 1) {
                odd++, mid = p.first;
				if (odd > 1) return palindromes;
            }
            half += string(p.second / 2, p.first);//constructor of string
        }
        palindromes = permutations(half);
        for (string& p : palindromes) {
            string t(p);
            reverse(t.begin(), t.end());
			if (odd) t = mid + t;
            p += t;
        }
        return palindromes;
    }
private: 
    vector<string> permutations(string& s) {
        vector<string> perms;
        string t(s);
        do {
            perms.push_back(s);
            next_permutation(s.begin(), s.end()); //cpp algorithm
        } while (s != t);
        return perms; 
    }
};
