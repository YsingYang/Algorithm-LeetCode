class Solution {
    /*****************
     * 
     * 有点类似与sameTree, 不过因为是Symeetric, 要注意下判断是判断left->right, right->left
     * 
     *****************/
public:
    bool isSymmetric(TreeNode* root) {
        if(!root)
            return true;
        return isSame(root->left, root->right);
        
    }
    
    bool isSame(TreeNode* left, TreeNode* right){
        if(!left && !right){
            return true;
        }
        if(!left || !right){
            return false;
        }
        if(left->val == right->val)
            return isSame(left->left, right->right) && isSame(left->right, right->left);
        return false;
    }
};


#Python version
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def ismirror(r1, r2):
            if not r1 and not r2:
                return True
            if not r1 or not r2:
                return False
            
            if r1.val == r2.val:
                return ismirror(r1.left, r2.right) and ismirror(r1.right, r2.left)
            return False
        if not root:
            return True
        return ismirror(root.left, root.right)
