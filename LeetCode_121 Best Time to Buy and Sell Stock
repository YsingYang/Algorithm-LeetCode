

class Solution {
/**
 * This problem is same as max subarray;
 * just different in curMax+= prices[i] - prices[i-1],because we want to calculate the max diff,not the max sum
 */
public:
    int maxProfit(vector<int>& prices) {
        int curMax = 0,curProfit = 0;
        for(int i=1;i<prices.size();++i){
            curMax = max(0,curMax+= prices[i] - prices[i-1]);
            curProfit = max(curProfit,curMax);
        }
        return curProfit;
    }
};


class Solution {
/**
  其实与上面的方法类似, 只不过这里是选取prices[i]的最小值, 和计算prices[i]与最小值的的差的最大值
  上面方法在计算curMax+= prices[i] - prices[i-1],也相当于是保持最小值的情况下不断计算最大值
**/
public:
    int maxProfit(vector<int>& prices) {
        int res = 0, cur = INT_MAX;
        for(int i = 0; i < prices.size(); ++i){
            if(i > 0)
                res = max(res, prices[i] - cur);
            cur = min(cur, prices[i]);
        }
        return res;
    }
};

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        cur , res = 0, 0
        for i in range(1,len(prices)):
            cur = max(0, cur += prices[i] - prices[i-1])
            res = max(res, cur)
        return res
