class Solution {
/**
 * 只是一个很简单的问题，与BTBSS1类似
 * 只不过比第一次写出来的简单很多，因为只有当后面的stock>前面的stock时，才会选择卖
 * 这时候只有将profit+= prices[i] - prices[i-1];即可解决，因为如果后面再大，还是会加上利润
 * 而出现小值时则不会处理
 * 
 */
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i=1;i<prices.size();++i){
            if(prices[i]>prices[i-1])
                profit+= prices[i] - prices[i-1];
        }
        return profit;
    }
};


class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        res = 0
        for i in range(1,len(prices)):
            res += max(0, prices[i] - prices[i-1])
        return res

Python 1-line
        #sum(是对于list作用的,所以需要用列表生成器生成相应的list)
        return sum([y - x for x, y in zip(prices[:-1], prices[1:]) if y > x]) 
