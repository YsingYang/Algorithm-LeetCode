/*
    使用union-find 的方法，考虑到数组可能很大，所以不建议使用vector，使用map(unordered_map如果删除迭代器可能会有影响？)，顺序遍历vector,每次遇到一个数，像mp中插入mp[i] = i+1,同时如果 mp[i+1] == mp.end(),mp[i+1] = i+1(这里为什么不用-1呢)，因为题目并没有说数组中不包含负数，-1反而会影响操作，所以等于自身会比较好
    
    然后顺序遍历map, map是有序的如果遇到mp[i] = i,那么 他没有后续的连续节点。遍历完vector，即可得到结果。
    
*/



class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        map<int,int> mp;
        for(int i:nums){
            mp[i] = i+1;
            if(mp.find(i+1)==mp.end())
                mp[i+1] = i+1;
        }
        /*for(auto &it:mp){
            cout<<it.first<<"   "<<it.second<<endl;
        }*/
        int res=0,len=0;
        for(map<int,int>::iterator it = mp.begin();it!=mp.end();++it){
            if(it->first==it->second){
                res = max(res,len);
                len = 0;
            }
            else{
                ++len;
            }
        }
        return res;
    }
};


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int> mp;
        for(auto &i:nums)
            mp.insert(i);
        int res = 0;
        for(auto &it:mp){
            if(mp.find(it-1)==mp.end()){
                int m=it,n = m+1;
                while(mp.find(n)!=mp.end()){
                    ++n;
                }
                res = max(n-m,res);
            }
        }
        return res;
    }
};
