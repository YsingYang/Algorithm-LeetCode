struct compare{
    bool operator()(const pair<int,int> &p1,const pair<int,int> &p2){
        return p1.first>p2.first;
    }
};

class Solution {
/***
 * 从小到大进行贪心..这里不能从大到小的，因为从大到小贪心会遇到这种情况1,2,3,4,5,6,7，这里7本来是最大的，但如果从大到小贪，那么7会先+1,之后到6还要回过头来对7操作，显然是很复杂的，但如果从小到大贪心就不会出现这种情况了，
 * 
 * 同时因为我们需要与左右两边的ratings进行比较，所以仅仅记录下rating是不够的，还需要记录下标对左右的rating进行判断
 * 
 * 会有3种情况（注意处理越界情况）
 * 1. 比左右都小
 * 2. 比左or右其中一边大，
 * 3. 比两边都大，取最大值+1
 * 
 */
public:
    int candy(vector<int>& ratings) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,compare> pq;
        int size  = ratings.size(),count = size;
        vector<int> candy(size,0);
        for(int i=0;i<size;++i){
            pq.push(make_pair(ratings[i],i));
        }
        while(!pq.empty()){//从小到大 pop,因为从大到小好像有问题
            pair<int,int> tmp = pq.top();
            //3种情况，1,比两端都小跳过，比一端大，比两端都大
            int left = tmp.second-1,right = tmp.second +1;
            if((left<0||ratings[left]>=tmp.first)&&(right>=size||ratings[right]>=tmp.first)){
                pq.pop();
                continue;
            }
            else if((left>=0&&ratings[left]<tmp.first)&&(right>=size||ratings[right]>=tmp.first)){
                candy[tmp.second] = candy[left] + 1;
                count += candy[tmp.second];
            }
            else if((left<0||ratings[left]>=tmp.first)&&(right<size&&ratings[right]<tmp.first)){
                candy[tmp.second] = candy[right] + 1;
                count += candy[tmp.second];
            }
            else{
                int neibor = left<0?candy[right]:right>=size?candy[left]:max(candy[left],candy[right]);
                candy[tmp.second] = neibor +1;
                count += candy[tmp.second];
            }
            pq.pop();
        }
        return count;
    }
};

///简化代码后结果
struct compare{
    bool operator()(const pair<int,int> &p1,const pair<int,int> &p2){
        return p1.first>p2.first;
    }
};

class Solution {
public:
    int candy(vector<int>& ratings) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,compare> pq;
        int size  = ratings.size(),count = size;
        vector<int> candy(size,0);
        for(int i=0;i<size;++i){
            pq.push(make_pair(ratings[i],i));
        }
        while(!pq.empty()){//从小到大 pop,因为从大到小好像有问题
            pair<int,int> tmp = pq.top();
            //3种情况，1,比两端都小跳过，比一端大，比两端都大
            int left = tmp.second-1,right = tmp.second +1;
            if((left<0||ratings[left]>=tmp.first)&&(right>=size||ratings[right]>=tmp.first)){
                pq.pop();
                continue;
            }
            int neibor = 0;
            neibor = ((left<0||ratings[left]>=tmp.first)?candy[right]:(right>=size||ratings[right]>=tmp.first)?candy[left]:max(candy[left],candy[right]))+1;
            count += candy[tmp.second] = neibor;
            pq.pop();
        }
        return count;
    }
};


class Solution {
/**
 * 两遍循环，一遍forward,如果大于则candy[i-1]+1,否则为1
 * 为了处理逆序的candy,我们还需要backward进行多一次循环，注意判断条件为ratings[i]>ratings[i+1]&&candy[i]<=candy[i+1]下面给出了响应的解释
 * 
 */
public:
    int candy(vector<int>& ratings) {
        int size = ratings.size();
        vector<int> candy(size,0);
        candy[0] = 1;
        for(int i=1;i<size;++i){
            candy[i] = (ratings[i]>ratings[i-1]?candy[i-1]+1:1);
        }
        int count = candy[size-1];
        /**
         * 这里注意多加一个条件candy[i]<=candy[i+1]，因为再forward过程中，可能已经使得candy[i]>candy[i+1]了，这时候我们就需要对candy[i]作出改变
         */
        for(int i=size-2;i>=0;--i){
            count += (candy[i] = ratings[i]>ratings[i+1]&&candy[i]<=candy[i+1]?candy[i+1]+1:candy[i]);
        }
        
        return count;
    }
};


class Solution {
/***
 * 该方法相当于在递增的过程中寻找连续递减的序列，找到最低序列之后，同时计算降序的数目
 * 利用((dropCount+1)*dropCount)>>1，高斯公式计算在降序中需要多少个candy
 * 另外注意有一种情况如 2,7,6,5,4,3,2,1，这时候7candy是2,明显是不足够的，所以我们需要根据
 * if(dropCount>=preCandy)
        count += dropCount - preCandy +1;
 * 将7缺失的candy补上
 * 最后降序可能持续到end，我们遍历完还需要判断dropCount是否大于0处理
 */
public:
    int candy(vector<int>& ratings) {
        int size = ratings.size();
        int preCandy = 1,dropCount=0,count = 1;
        for(int i=1;i<size;++i){
            if(ratings[i]>=ratings[i-1]){//注意判断是大于等于
                if(dropCount>0){
                    count += ((dropCount+1)*dropCount)>>1;
                    if(dropCount>=preCandy)
                        count += dropCount - preCandy +1;
                    dropCount = 0;
                    preCandy = 1;
                }
                /**
                 * 这段是用于计算当前递增的candy
                 */
                preCandy = (ratings[i]==ratings[i-1]?1:preCandy+1);
                count += preCandy;
            }
            else
                ++dropCount;
        }
        ///当到最后仍然还是降序的序列时
        if(dropCount>0){
            count += ((dropCount+1)*dropCount)>>1;
            if(dropCount>=preCandy)
               count += dropCount - preCandy +1;
        }
        return count;
    }
};
