/**
 * 自顶向下的基于dp memorization方法
 * 采用递归方法解决子问题，同时记录当前的string是否曾经解决过，如果解决过直接返回
 * 子问题的解决过程是for一遍s,当如果s.substr(i)存在
 * 那么递归搜索子问题s.substr(0,i);
 * 得到结果后合并在一起；
 *
 
 */

class Solution {
unordered_map<string,vector<string>> mp;
unordered_set<string> wd;
vector<string> getVs(string word,vector<string> pre){
    for(int i=0;i<pre.size();++i){
        pre[i] += " " + word;
    }
    return pre;
}
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        wd = unordered_set<string>(wordDict.begin(),wordDict.end());
        return Break(s);
    }
    
    vector<string> Break(string s){
        if(mp.find(s)!=mp.end())
            return mp[s];//自顶向下搜，基于memorization,遇到直接返回
        vector<string>  res;
        if(wd.find(s)!=wd.end())
            res.push_back(s);//本身可成为单词
        for(int i=1;i<s.size();++i){
            string tmp = s.substr(i);
            if(wd.find(tmp)!=wd.end()){
                string remain = s.substr(0,i);
                vector<string> pre = getVs(tmp,Break(remain));//remain string res + tmp;
                res.insert(res.end(),pre.begin(),pre.end());
            }
        }
        
        mp[s] = res;
        return res;
    }
};


// backtracking 方法，当遇到没有答案的 case很容易 TLE，而且不适合解决一些极端的case
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        //用过了就不能再用了        
        size = s.size();
        unordered_set<string> mp(wordDict.begin(),wordDict.end());
        vector<string> res;
        string str = "";
        backtracking(s,res,str,0,0,mp);
        return res;
        
    }
    
    void backtracking(const string &s,vector<string> &res,string &str,int begin,int count,unordered_set<string> &mp){
        if(begin==size&&count>0){
            res.push_back(str);
            return;
        }
        for(int i=begin;i<size;++i){
            string tmp = s.substr(begin,i-begin+1);
            if(mp.find(tmp)!=mp.end()){
                //mp.erase(tmp);
                str = (str.empty()?str+tmp:str+' '+tmp);
                backtracking(s,res,str,i+1,count+1,mp);
                if(str.size()==tmp.size()){
                    str.clear();
                }
                else{
                    str.erase(str.size()-tmp.size()-1);
                }
                //mp.insert(tmp);
            }
        }
    }
private:
    int size;
    
};
