//Recursive Version
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        postOrder(root,res);
        return res;
    }
    
    void postOrder(TreeNode* root,vector<int> &res){
        if(!root)
            return ;
        postOrder(root->left,res);
        postOrder(root->right,res);
        res.push_back(root->val);
    }
};

//Iterative Version
class Solution {
/***
 * 迭代版本,需要为根节点多提供一个flag信息,表示这个点右子树是否已经被访问过
 * 
 * 首先while循环寻找到最深的左子节点,
 * 这时候会有两个选择
 * 1. st.top()右子树没有被访问过,访问右子树
 * 2. st.top()右子树已经被访问,push val进vector中
 * 同时pop出st的节点,另root = nullptr(给下一次循环使用)
 * 
 */
stack<pair<TreeNode* , bool>> st;
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        while(!st.empty()||root){
            while(root){
                st.emplace(root,true);
                root = root->left;
            }
            if(st.top().second){
                root = st.top().first;
                st.top().second = false;
                root = root->right;
            }
            else{
                root = st.top().first;
                res.push_back(root->val);
                st.pop();
                root = nullptr;
            }
        }
        return res;
    }
};

//Interesting trick , left -> right -> root is reverse  sequence of root -> right -> left , so ,we can get result sequence by 
get root -> right -> left sequence  and revrser vector finally.Posted by @Deepalaxmi 
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        stack<TreeNode*> nodeStack;
        vector<int> result;
        //base case
        if(root==NULL)
        return result;
        nodeStack.push(root);
    while(!nodeStack.empty())
    {
        TreeNode* node= nodeStack.top();  
        result.push_back(node->val);
        nodeStack.pop();
        if(node->left)
        nodeStack.push(node->left);
        if(node->right)
        nodeStack.push(node->right);
    }
     reverse(result.begin(),result.end());
     return result;
    
}
