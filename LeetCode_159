//Solution 1 with map
class Solution {
public:
    int lengthOfLongestSubstringTwoDistinct(string s) {
        unordered_map<int,int> mp;
        int right = 0,left = 0,res = 0;
        while(right<s.size()){
           ++mp[s[right++]];
           if(mp.size()>2){
               if(--mp[s[left++]]==0){
                   mp.erase(s[left-1]);
               }
           }
           res = max(res,right-left);
        }
        return res;
    }
};

//Solution 2 improve it by vector
class Solution {
public:
    int lengthOfLongestSubstringTwoDistinct(string s) {
        vector<int> mp(128);
        int right = 0,left = 0,res = 0,distCount=0;
        while(right<s.size()){
           distCount += (++mp[s[right++]]==1);
           if(distCount>2){
               if(--mp[s[left++]]==0){
                   --distCount;
               }
           }
           res = max(res,right-left);
        }
        return res;
    }
};

//Solution 3 shared by  @jianchao.li.fighter 
class Solution {
public:
    int lengthOfLongestSubstringTwoDistinct(string s) {
        int res = 0,l = 0,r = -1,size = s.size();
        for(int i=0;i<size;++i){
            if(s[i]==s[i-1])
                continue;
            if(r>=0&&s[i]!=s[r]){
                res = max(res,i-l);
                l = r+1;
            }
            r = i-1;
        }
        return max(res,size-l);
    }
};
