class Solution {
/****
 * 
 * 下面的Solution考虑上了无环的case 
 */
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* p1 = headA, *p2 = headB;
        bool round1 = true, round2 = true;
        while(p1 && p2 ){
            if(p1 == p2){
                return p1;
            }
            p1 = p1 -> next;
            if(!p1 && round1){
                p1 = headB;
                round1 = false;
            }
            p2 = p2 -> next;
            if(!p2 && round2){
                p2 = headA;
                round2 = false;
            }
        }
        return nullptr;
    }
};


#Python Solution, 不检查无交叉点
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA is None or headB is None:
            return None
        
        l1, l2 = headA, headB
        while l1 != l2:
            l1 = l1.next if l1 is not None else headB
            l2 = l2.next if l2 is not None else headA
        return l1
