class Solution {
/**
 * 该方法用到了类似BTBSS3中的方法
 * 但注意这里又3个坑，1：k为0
 * 2.当k非常大（甚至大过）prices.size()的时候
 * 3. prices.size()为0
 * 改算法的复杂度挺高用到O （2min(prices.size(),k)）
 * 时间复杂度为O(k * n);
 * 
 */
public:
    int maxProfit(int k, vector<int>& prices) {
        if(k==0||prices.size()==0)
            return 0;
        int size = k>prices.size()?prices.size():k;
        vector<int> sell(size,0),hold(size,INT_MIN);
        for(int i=0;i<prices.size();++i){
            for(int j=size-1;j>=0;--j){
                sell[j] = max(hold[j]+prices[i],sell[j]);
                int thisSell = (j>0?sell[j-1]-prices[i]:-prices[i]);
                hold[j] = max(hold[j],thisSell);
            }
        }
        return sell[size-1];
    }
};
