//My solution with priority_queue

class Solution {
struct vectorCompare{
    bool operator()(vector<int> const &v1,vector<int> const&v2){
        return v1[2]<v2[2];
    }
};
public:
    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
        vector<pair<int,int>> res;
        if(buildings.empty())
            return res;
        priority_queue<vector<int>,vector<vector<int>>,vectorCompare> pq;
        pq.push(buildings[0]);
        int size = buildings.size();
        for(int i=0;i<size;++i){
            while(!pq.empty()&&buildings[i][0]>=pq.top()[1]){
                int LastEnd = pq.top()[1];
                while(!pq.empty()&&pq.top()[1]<=LastEnd)
                    pq.pop();
                int NextHeigh = pq.empty()?0:pq.top()[2];
                if(LastEnd > res.back().first){
                    if(NextHeigh == res.back().second)
                        continue;
                    res.emplace_back(LastEnd,NextHeigh);
                }
            }
            if(!res.empty()&&buildings[i][0]==res.back().first){
                res.pop_back();//避免重复以及批邻的点
            }
            pq.push(buildings[i]);
            vector<int> tmp = pq.top();
            if(res.empty()||(tmp[0]>res.back().first&&tmp[2]!=res.back().second)){
                res.emplace_back(tmp[0],tmp[2]);//避免队列中重复的点
            }
        }
        while(!pq.empty()){
            int LastEnd = pq.top()[1];
            while(!pq.empty()&&pq.top()[1]<=LastEnd)
                pq.pop();
            int NextHeigh = pq.empty()?0:pq.top()[2];
            if(LastEnd > res.back().first){
                if(NextHeigh == res.back().second)
                        continue;
                res.emplace_back(LastEnd,NextHeigh);
            }
        }//最后循环完后，确定最后一个点的位置
        return res;
    }
};


class Solution {
public:
    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
        vector<pair<int, int>> vec;
        for(auto &v : buildings){
            vec.emplace_back(v[0], -v[2]);
            vec.emplace_back(v[1], v[2]);
        }//按照起始点为pair<idx, -hight> , 终点为pair<idx, hight>插入到vector中
        
        
        sort(vec.begin(), vec.end(), [](const pair<int, int> &p1, const pair<int, int>& p2){
            if(p1.first == p2.first)
                return p1.second < p2.second; //若相等, 先插入新的, 再erase旧的
            return p1.first < p2.first;
        });//对vec按照idx从小到大进行排序
        
        
        vector<pair<int, int>> res;
        int preHest = -1;
        pair<int, int> temp;
        multiset<int> heap = {0};
        for(auto &v : vec){
            //cout<<v.first<<"    "<<v.second<<endl;
            if(v.second < 0){
                heap.insert(-v.second);
            }
            else{
                heap.erase(heap.find(v.second));
            }
            int height = *heap.rbegin();
            if(height != preHest){ //每一次pop出一个堆内最大的做为候选, 如果该最大的与上一次的相同,则跳过
                res.emplace_back(v.first, height);
                preHest = res.back().second;
            }
        }
        return res;
    }
};
