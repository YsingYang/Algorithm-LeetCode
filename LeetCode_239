/*
    比较简单的一个思路，用mutiset<int> 存，超过k时pop出第一个节点就可以了
    但算法的时间复杂度是o(nlgn)
*/
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if(nums.empty())
            return res;
        multiset<int> windows(nums.begin(),nums.begin()+k-1);//题目说明了k的边界情况
        for(int i=k-1;i<nums.size();++i){
            windows.insert(nums[i]);
            res.push_back(*(--windows.end()));
            windows.erase(windows.find(nums[i-k+1]));
        }
        return res;
    }
};


/*
    deque方法，记录的值不是nums[i]，而是index下标,deque记录的是这个下标的（生命周期），一旦deque超过了他的生命周期，他就是pop出
    同时queue与stack都可以用来存储最大值，这里利用了 while(!dq.empty()&&nums[dq.back()]<nums[i])将比当前值小的数全部从尾部pop出

*/

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> dq;
        for(int i=0;i<nums.size();++i){
            if(!dq.empty()&&dq.front()<i-k+1){
                dq.pop_front();
            }
            //cout<<dq.front()<<endl;
            while(!dq.empty()&&nums[dq.back()]<nums[i]){
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1)
                res.push_back(nums[dq.front()]);
        }
        return res;
    }
};
