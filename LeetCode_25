//My solution

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* dummy = new ListNode(0),*dummyEnd = dummy;
        ListNode* end = head,*nextHead;
        int count;
        while(end){
            count = 1;
            end = head;
            while(end&&count<k){
                end = end->next;
                ++count;
            }
            if(end){
                nextHead = end ->next;
                end->next = nullptr;
                head = reverList(head,end);
                dummyEnd->next = head;
                dummyEnd = end;
                head = nextHead;
            }
            else{
                dummyEnd->next = head;
            }
        }
        return dummy->next;
    }
    
    ListNode *reverList(ListNode *head,ListNode *&end){
        ListNode *subDummy = new ListNode(0),*temp;
        end = head;
        while(head){
            temp = head;
            head = head->next;
            temp ->next = subDummy->next;
            subDummy ->next = temp;
        }
        return subDummy->next;
    }
};


//jianchao.li.fighter  Solution,more concise and clear
class Solution { 
public: 
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (!hasKNodes(head, k)) return head;
        ListNode* new_head = new ListNode(0);
        new_head -> next = head;
        ListNode* pre = new_head;
        ListNode* cur = head;
        while (hasKNodes(cur, k)) {
            for (int i = 0; i < k - 1; i++) {
                ListNode* temp = pre -> next;
                pre -> next = cur -> next;
                cur -> next = cur -> next -> next;
                pre -> next -> next = temp; 
            }
            pre = cur;
            cur = pre -> next;
        }
        return new_head -> next;
    }
private:
    bool hasKNodes(ListNode* node, int k) {
        int cnt = 0;
        while (node) {
            cnt++;
            if (cnt >= k) return true;
            node = node -> next;
        }
        return false; 
    }
};
