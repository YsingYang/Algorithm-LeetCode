//O(n) space dp
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int size = costs.size();
        vector<vector<int>> dp(size+1,vector<int> (3));
        for(int i=1;i<=size;++i){
            for(int j=0;j<=2;++j){
                dp[i][0] = min(dp[i-1][1],dp[i-1][2])+costs[i-1][0];
                dp[i][1] = min(dp[i-1][0],dp[i-1][2])+costs[i-1][1];
                dp[i][2] = min(dp[i-1][0],dp[i-1][1])+costs[i-1][2];
            }
        }
        return min(dp[size][0],min(dp[size][1],dp[size][2]));
    }
};
//O(1)space
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int size = costs.size();
        vector<int> last(3,0),now(3,0);
        for(int i=1;i<=size;++i){
            for(int j=0;j<=2;++j){
                now[0] = min(last[1],last[2])+costs[i-1][0];
                now[1] = min(last[0],last[2])+costs[i-1][1];
                now[2] = min(last[0],last[1])+costs[i-1][2];
            }
            last = now;
        }
        return min(now[0],min(now[1],now[2]));
    }
};
