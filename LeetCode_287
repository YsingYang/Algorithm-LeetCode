//My solution
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int size = nums.size(),maxNum = size-1,minNum=1;
        int mid,minCount,maxCount,equCount;
        while(minNum<maxNum){
            mid = minNum + ((maxNum - minNum)>>1);
            //cout<<mid<<"   "<<maxNum<<"   "<<minNum<<endl;
            maxCount = mid - maxNum;
            minCount = minNum - mid;
            equCount = 0;
            for(int i=0;i<size;++i){
                if(nums[i]<minNum||nums[i]>maxNum)
                    continue;
                if(nums[i]>mid)
                    ++maxCount;
                else if(nums[i]<mid)
                    ++minCount;
                else
                    ++equCount;
            }
            if(equCount>1)
                return mid;
            if(maxCount>minCount){
                minNum = mid + 1;
            }
            else if(maxCount<minCount)
                maxNum = mid - 1;
        }
        return maxNum;
    }
};

//Above solution could be simplified to this
class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        low = 1
        high = len(nums)-1
        
        while low < high:
            mid = low+(high-low)/2
            count = 0
            for i in nums:
                if i <= mid:
                    count+=1
            if count <= mid:
                low = mid+1
            else:
                high = mid
        return low
        
//O(N) idea poest by @echoxiaolee The main idea is the same with problem Linked List Cycle II
,https://leetcode.com/problems/linked-list-cycle-ii/. Use two pointers the fast and the slow. 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0],fast = nums[nums[0]];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        fast = 0;
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
