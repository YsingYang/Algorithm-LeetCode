/*Solving it in-place is not difficult ,just use other number to store it new state.My implementation is not concise.hah,so
  I still need to improve my programming skill.
*/
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        if(board.empty())   return ;
        int rsize=board.size(),csize=board[0].size();
        for(int i=0;i<rsize;++i){
            for(int j=0;j<csize;++j){
                checkboard(board,i,j,rsize,csize);
            }
        }
        for(int i=0;i<rsize;++i){
            for(int j=0;j<csize;++j){
                if(board[i][j]==-1)
                    board[i][j]=1;
                else if(board[i][j]==2)
                    board[i][j]=0;
            }
        }
    }
private:
    void checkboard(vector<vector<int>>& board,int i,int j,int rsize,int csize){
        //count alive;
        int rfirst=max(0,i-1),rend=min(rsize-1,i+1),cf=max(0,j-1),cend=min(csize-1,j+1),count=0,cfirst;
        for(;rfirst<=rend;++rfirst){
            for(cfirst=cf;cfirst<=cend;++cfirst){
                if(rfirst==i&&cfirst==j){
                    continue;
                }
                if(board[rfirst][cfirst]==1||board[rfirst][cfirst]==2)
                    ++count;
            }
        }
        if(count>3&&board[i][j]==1)
            board[i][j]=2;
        else if(count==3&&board[i][j]==0)
            board[i][j]=-1;
    }
};
/*
  Thanks for @StefanPochmann sharing his elegant and concise code.I really love the bit-manipulation in his implementation.
*/

void gameOfLife(vector<vector<int>>& board) {
    int m = board.size(), n = m ? board[0].size() : 0;
    for (int i=0; i<m; ++i) {
        for (int j=0; j<n; ++j) {
            int count = 0;
            for (int I=max(i-1, 0); I<min(i+2, m); ++I)
                for (int J=max(j-1, 0); J<min(j+2, n); ++J)
                    count += board[I][J] & 1;
            if (count == 3 || count - board[i][j] == 3)
                board[i][j] |= 2;
        }
    }
    for (int i=0; i<m; ++i)
        for (int j=0; j<n; ++j)
            board[i][j] >>= 1;
}
