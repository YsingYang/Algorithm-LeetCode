//My solution ,beat 65% with 185ms;

class MedianFinder {
multiset<int> mp;
multiset<int>::iterator pos;
int diff;
public:
    /** initialize your data structure here. */
    MedianFinder() {
        pos = mp.end();
        diff = 0;
    }
    
    void addNum(int num) {
        mp.insert(num);
        if(pos==mp.end()){
            pos = next(mp.begin(),mp.size()>>1);
        }
        else{
            int i = (num>=*pos)?1:-1;
            if(abs(diff+=i)==2){
                i<0?--pos:++pos;
                diff=0;
            }
        }
    }
    
    double findMedian() {
        double res = (diff == 0? *pos : *pos/2.0 + *next(pos,diff)/2.0);
        return res;
    }
};

//Solution with priority_queue posted by @StefanPochmann
class MedianFinder {
priority_queue<int> large,small;
/*
    需要keep两个堆，一个large存储大的一半存储为小根堆,small存储小的一半存储为大根堆，
    但由于c++priority_queue默认的是大根堆,所以这里如果不用定制操作的话，可以取从small,pop出取反放入large中
    
    最后得到的结果为large.top() 或者为large.top()+small.top()/2,这里尽量避免溢出可以分别取/2；
*/
public:
    /** initialize your data structure here. */
    MedianFinder() {
        
    }
    
    void addNum(int num) {
       /* large.push(-num);
        if(small.size()<=large.size()-2){
            small.push(-large.top());
            large.pop();
        }  不能为这么简单push，因为在插入新元素过程中，两个堆扔然要相互交换
        */
        large.push(-num);
        small.push(-large.top());
        large.pop();
        if(small.size()>large.size()){
            large.push(-small.top());
            small.pop();
        }
    }
    
    double findMedian() {
        return large.size()==small.size()?-large.top()/2.0+small.top()/2.0:-large.top();
    }
};
