//使用unionFind, 将二维数据抽象为一维，同时将结果抽象成一棵树，该问题实质是找这题树有无共同的根
class Solution {
public:
    vector<int> numIslands2(int m, int n, vector<pair<int, int>>& positions) {
        vector<vector<int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};.// move direction
        vector<int> unionVector(m*n,-1);
        vector<int> res;
        int island = 1;
        for(int i=0;i<positions.size();++i){
            int row = positions[i].first ,col = positions[i].second;
            int index = n*row + col;
            unionVector[index] = index;
            for(int j=0;j<directions.size();++j){
                int nbRow = row + directions[j][0],nbCol = col + directions[j][1],nbIndex;
                if(nbRow>=0&&nbRow<m&&nbCol>=0&&nbCol<n&&(unionVector[nbIndex = nbRow*n+nbCol]!=-1)){
                    //cout<<nbRow<<"   "<<nbCol<<"   "<<nbIndex<<endl;
                    int x = unionFind(unionVector,index),y = unionFind(unionVector,nbIndex);
                    ///cout<<x<<y<<endl;
                    if(x!=y){
                        unionVector[x] = y;//key part,can not be writed  as  unionVEctor[index] = y,we should find the root of index, not itself;
                        --island;
                    }
                }
            }
            res.push_back(island++);
        }
        return res;
    }
    
    int unionFind(vector<int> &unionVector,int pos){
        if(unionVector[pos]==pos)
            return pos;
        return unionFind(unionVector,unionVector[pos]);
    }
};
