/*

    buttom-up的dynamic programming 方法，但我感觉这种buttom up得有点奇怪，优先对于该子解
    他的buttom 应该是基于数组的每个元素，因为剩下他们自己一个时，他们的最优解就是自身
    但该buttom是基于step的，dp的bottom为连续元素的解，等到下一次step时，如up：left = 0,i =1, right =3
    由于step2时已经记录下了bottom:left =1 i =2 right =3,所以相当于up中得到的解+上bottm的解 就是left 0,-right 3的解

*/


class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int size = nums.size();
        vector<int> cache(size+2);
        int n=1;
        for(;n<=size;++n){
            cache[n] =  nums[n-1];
        }
        cache[0] = cache[n++] = 1;
        vector<vector<int>> dp(n,vector<int> (n,0));
        for(int k=2;k<n;++k){//step
            for(int left = 0;left<n-k;++left){//left num
                int right = left +k;//right num
                for(int i=left+1;i<right;++i){
                    dp[left][right] = max(dp[left][right],cache[left]*cache[i]*cache[right] + dp[left][i] + dp[i][right]);
                }
            }
        }
        return dp[0][n-1];
    }
};


/*
    Divide and Conquer up to bottom.这种divide and conque 基于top to bottom的方向且using Memoization的方法，得到跟dp一样的数组。
    只是更新的方向不同，时间复杂度上差不多，d&c方法稍微比较好理解，但是相对来说还是dp的方法更快一些，在某种程度上Memoization避免了递归的重复子问题
    但是避免不了的是d&c方法始终都会往重复子问题上搜，从而出现了无意义的递归，返回一个曾经记录了的值，只是减少了大量的乘法运算而已
    

*/
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int size = nums.size();
        vector<int> cache(size+2);
        int n=1;
        for(;n<=size;++n){
            cache[n] =  nums[n-1];
        }
        cache[0] = cache[n++] = 1;
        vector<vector<int>> dp(n,vector<int> (n,0));
        return divideAndConquer(dp,cache,0,n-1);
    }
    
    int divideAndConquer(vector<vector<int>> &dp,vector<int> &nums,int left,int right){
        if(left==right-1){
            return 0;
        }
        if(dp[left][right]>0)
            return dp[left][right];
        int res=0;
        for(int i=left+1;i<right;++i){//divide and conquer in the same step
            res = max(res,nums[left] * nums[i] * nums[right] + divideAndConquer(dp,nums,left,i) + divideAndConquer(dp,nums,i,right));
        }
        dp[left][right] = res;
        return res;
    }
};

//回顾了一下Dp算法
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int size = nums.size();
        vector<int> vec(size + 2);
        vec[0] = 1, vec.back() = 1;
        for(int i = 1; i < size + 1; ++i){
            vec[i] = nums[i-1];
        }
        //初始化数组, 头尾加了2个1方便计算
        vector<vector<int>> dp(size + 2, vector<int> (size + 2));
        
        for(int len = 1; len <= size; ++len){
            for(int i = 1; i + len - 1 <= size; ++i){
                int j = i + len - 1;
                for(int k = i; k <= j; ++k){
                    dp[i][j] = max(dp[i][j], vec[i-1] * vec[k] * vec[j+1] + dp[i][k-1] + dp[k+1][j]);//最后选k 计算得到当前的dp[i][j]
                }
            }    
        }
        return dp[1][size];
    }
};
