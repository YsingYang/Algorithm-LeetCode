class Solution {
/**
 * 解决该题主要是找到该题的求值过程
 * 括号匹配成功，当且仅当出现')'与'('相对应的时候
 * 假设在s[i]碰见了'(',(dp的size为s.size()+1)
 * 如果s[i-1] == '('满足匹配
 *           那么dp[i+1] <-对应s[i]= dp[i-1] 对应s[i-2]+2 
 * 如果s[i-dp[i]-1] == '(';比如(())这种 ，
 * 那么dp[i+1] = dp[i](上一个已经匹配的结果（一定是有')'）) + dp[i-dp[i]-1]，之前出现完全匹配的结果 + 2当前匹配,
 * 如()(())
 * dp = {0,2,0,0,2,6}
 * 
 */
public:
    int longestValidParentheses(string s) {
        int size = s.size();
        vector<int> dp(size+1,0);
        int res = 0;
        for(int i=1;i<size;++i){//仅当完成匹配时才+2
            if(s[i]==')'){
                if(s[i-1]=='('){
                    dp[i+1] = dp[i-1] + 2;
                }
                else{
                    if(s[i-dp[i]-1]=='('){
                        dp[i+1] = dp[i]+dp[i-dp[i]-1] + 2;//s[i-dp[i]-2]对应的dp下标应该是dp[i-dp[i]-1]需要+1;
                    }        
                }
            }
            res = max(res,dp[i+1]);
        }
        return res;
    }
};

class Solution {
/***
 * 利用stack记录，当且仅当满足时才pop出占，否则push下标
 * 循环结束如果stack还非空
 * 那么通过right-left-1得出中间pop出过几个符合的
 */
public:
    int longestValidParentheses(string s) {
        stack<int> st;
        int size = s.size();
        for(int i=0;i<size;++i){
            if(s[i]==')'&&!st.empty()&&s[st.top()]=='(')
                st.pop();
            else
                st.push(i);
        }
        if(st.empty())
            return size;
        int left,right =size;
        int res= 0;
        while(!st.empty()){
            left = st.top();
            res = max(res,right-left -1);
            st.pop();
            right = left;
        }
        res = max(res,right);//注意这一句一定要加上，否则会出现问题，如())情况
        return res;
    }
};
