/*
    Binary indexed tree
    按照之前做的题来讲,像这种相应数值太大 不能利用数值建树，我们可以先用vector存储需要建树用到的值
    然后sorted,跟据其下标 我们就能用到binary indexed tree的搜索性质了
    
*/

class Solution {
typedef long long LL;
void bitAdd(vector<int> &Bit,int index){
    int size = Bit.size();
    while(index<size){
        ++Bit[index];
        index += (index&(-index));
    }
}

int Search(const vector<int> &Bit,int index){
    int sum = 0;
    while(index>0){
        sum += Bit[index];
        index -= (index&(-index));
    }
    return sum;
}
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int size = nums.size();
        vector<long long> sum(3*size+1);
        for(int i =1;i <= size;++i){
            sum[i] = sum[i-1] + (LL)nums[i-1];
            sum[size+i] = sum[i]+lower;
            sum[2*size+i] = sum[i]+upper;
        }
        sum.push_back(lower);
        sum.push_back(upper);
        vector<long long> sorted(sum.begin(),sum.end());
        sort(sorted.begin(),sorted.end());
        auto it  = unique(sorted.begin(),sorted.end());
        sorted.erase(it,sorted.end());
        unordered_map<long long,int> mp;
        for(int i = 0;i<sorted.size();++i){
            mp[sorted[i]] = i+1;//索引像原数组位置+1  +1是因为bitTree index0为0；
        }
        vector<int> bitTree(sorted.size()+1);
        bitAdd(bitTree,mp[sum[size]]);
        int res = 0;
        for(int i=size;i>=1;--i){
           // cout<<sum[i-1]+upper<<"   "<<sum[i-1]+lower<<endl;
            res +=(Search(bitTree,mp[sum[i-1]+upper]) - Search(bitTree,mp[sum[i-1]+lower]-1));
            bitAdd(bitTree,mp[sum[i-1]]);
            //cout<<res<<endl;
        }
        return res;
    }
};

//merge sort

/*
    其实跟reverse pair用到了一样的方法，都是后面减前面，只不过这里需要得到一个范围。
    如果不想用inplace_merge的话，可以自己写一个merge sort 就可以了。

*/

class Solution {
    int mergeSort(vector<long>& nums,const int &lower,const int &upper,vector<long>::iterator bg,vector<long>::iterator ed){
        if(ed-bg<=1){
            return 0;
        }
        auto mid = bg + (ed-bg)/2;
        auto m = mid,n = mid;
        int count = mergeSort(nums,lower,upper,bg,mid) + mergeSort(nums,lower,upper,mid,ed);
            
        for(auto i=bg;i!=mid;++i){
            while(m!=ed&&(*m-*i)<lower){
                ++m;
            }
            while(n!=ed&&(*n-*i)<=upper){
                ++n;
            }
            count += (n-m);
        }
        inplace_merge(bg,mid,ed);
        return count;
    }
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int size = nums.size();
        vector<long> sum(size+1);
        for(int i=0;i<size;++i){
            sum[i+1] = sum[i] + nums[i];
        }
        return mergeSort(sum,lower,upper,sum.begin(),sum.end());
    }
};
