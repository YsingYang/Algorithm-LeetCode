class Solution {
/*
    DFS + memorization的方法，对于每一个节点进行dfs搜索，寻找递增路径
    如果当前路径<memorization，证明已经找到了合适的路径直接return 
    注意处理visited数组

*/
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.empty())
            return 0;
        rs = matrix.size(),cs = matrix[0].size();
        vector<vector<int>> memoization(rs,vector<int>(cs,0));
        int maxPath = 0;
        vector<vector<bool>> visited(rs,vector<bool> (cs,true));//如果需要循环使用，那么最好是dfs完后置为true,不然会TLE ，因为每次构造一个rs *cs的数组复杂度为O(RS * CS);
        for(int i=0;i<rs;++i){
            for(int j=0;j<cs;++j){
                visited[i][j] = false;
                dfs(matrix,visited,memoization,maxPath,i,j,1);
                visited[i][j] = true;
            }
        /*    for(auto i:memoization){
                for(auto j:i){
                    cout<<j<<"   ";
                }
                cout<<endl;
            }
            cout<<endl<<endl;*/
        }
        return maxPath;
    }
    
    
    void dfs(vector<vector<int>> &matrix,vector<vector<bool>> &visited,vector<vector<int>> &memoization,int &maxPath,int i,int j,int nowLen){
            if(nowLen<=memoization[i][j]){
                return ;
            }
            memoization[i][j] = nowLen;
            maxPath = max(nowLen,maxPath);
            for(int k=0;k<4;++k){
                int nowi = i+direction[k][0],nowj  = j+direction[k][1];
                if(nowi<0||nowi>=rs||nowj<0||nowj>=cs||visited[nowi][nowj]==false||matrix[nowi][nowj]<=matrix[i][j])
                    continue;
                    //  continue条件，1.越界2 .访问过3.不是递增路径
                visited[i][j] = false;
                dfs(matrix,visited,memoization,maxPath,nowi,nowj,nowLen+1);
                visited[i][j] = true;
            }
    }
    
private:
int rs,cs;
vector<vector<int>> direction = {{1,0},{-1,0},{0,1},{0,-1}};
};



class Solution {
    /*
        这方法很有借鉴意义，相对于原本的DFS减少了许多重复的搜索
        每个节点存储了当前的最长路径，如果搜到某个节点能到底该节点，直接利用该节点的值
        从而避免了重复搜索的复杂度，有点类似于我在做maze2的方法
    */
    vector<vector<int>> visited;
    int height = 0, width = 0;
    int floodfill(vector<vector<int>>& matrix, int cur, int i, int j)
    {
        if (i < 0 || i >= height || j < 0 || j >= width )
            return 0;
        if (matrix[i][j] <= cur)
            return 0;
        if (visited[i][j] > 0)
            return visited[i][j];
        int r = floodfill(matrix, matrix[i][j], i + 1, j);
        int l = floodfill(matrix, matrix[i][j], i - 1, j);
        int u = floodfill(matrix, matrix[i][j], i, j + 1);
        int d = floodfill(matrix, matrix[i][j], i, j - 1);
        visited[i][j] = max(r, max(l, max(u, d))) + 1;
        return visited[i][j];
    }
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty())
            return 0;
        height = matrix.size(), width = matrix[0].size();
        visited.resize(height, vector<int>(width));
        int max_len = 0;
        for (int i = 0; i < height; ++i)
            for (int j = 0; j < width; ++j){
                max_len = max(max_len, floodfill(matrix, INT_MIN, i, j));
                for(auto k:visited){
                    for(auto z:k){
                        cout<<z<<"   ";
                    }
                    cout<<endl;
                }
                cout<<endl<<endl;
            }
        return max_len;
    }
};
