class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> hash(nums1.begin(),nums1.end());
        vector<int> res;
        for(int i=0;i<nums2.size()&&!hash.empty();++i){
            if(hash.find(nums2[i])!=hash.end()){
                res.push_back(nums2[i]);
                hash.erase(nums2[i]);
            }
        }
        return res;
    }
};


//Solution_2 sort and two_point
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        if(nums1.empty()||nums2.empty())    return res;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int *n1 = &(nums1[0]),*n2 = &(nums2[0]);
        int s1 =nums1.size(),s2=nums2.size();
        while(n1<=&nums1[s1-1]&&n2<=&nums2[s2-1]){
            if(*n1>*n2)
                ++n2;
            else if(*n1<*n2)
                ++n1;
            else{
                res.push_back(*n1);
            
                do{
                    ++n1;
                    ++n2;
                }while(!res.empty()&&res[res.size()-1]==*n1&&*n1==*n2);
            }
        }
        return res;
    }
};
