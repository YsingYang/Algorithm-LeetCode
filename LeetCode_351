//First submit

class Solution {
public:
    int numberOfPatterns(int m, int n) {
        vector<int> visited(10,1);
        int res = 0;
        vector<int> tel = {0,1,2,1,3,0,3,1,2,1};
       /* for(int i=1;i<=9;++i){
            for(int j = 1;j<=9;++j){
                cout<<(int)(tel[i]^tel[j])<<"   ";
            }
            cout<<endl;
        }*/
        backtracking(visited,0,m,n,res,-1,tel);
        return res;
    }
    
    void backtracking(vector<int> &visited,int count,const int &m,const int &n,int &res,int start,const vector<int> &tel){
        if(count>n)
            return;
        if(count>=m&&count<=n){
            ++res;
        }
        for(int i=1;i<=9;++i){
            if(visited[i]){
                int low = start>i?i:start;
                if(start==-1||((tel[i]^tel[start])!=0)||visited[(abs(start-i)>>1)+low]==0){
                    visited[i] = 0;
                    backtracking(visited,count+1,m,n,res,i,tel);
                    visited[i] = 1;
                }
            }
        }
    }
};

//second submit  using *4
class Solution {
public:
    int numberOfPatterns(int m, int n) {
        vector<int> visited(10,1);
        int res = 0;
        vector<int> tel = {0,1,2,1,3,0,3,1,2,1};
        for(int i = m;i<=n;++i){
            res += backtracking(visited,i-1,tel,1)*4;
            res += backtracking(visited,i-1,tel,2)*4;
            res += backtracking(visited,i-1,tel,5);
        }
        return res;
    }
    
    int backtracking(vector<int> &visited,int remain,const vector<int> &tel,int start){
        if(remain<0)
            return 0;
        if(remain==0)
            return 1;
        visited[start] = 0;
        int res = 0;
        for(int i=1;i<=9;++i){
            int low = start>i?i:start;
            if(visited[i]&&((tel[i]^tel[start])!=0||visited[(abs(start-i)>>1)+low]==0)){
                res += backtracking(visited,remain-1,tel,i);
            }
        }
        visited[start] = 1;
        return res;
    }
};

//final improvement using bitmanipulation
class Solution {
public:
    int numberOfPatterns(int m, int n) {
        int visited = 0b1111111111;
        int res = 0;
        vector<int> tel = {0,1,2,1,3,0,3,1,2,1};
        for(int i = m;i<=n;++i){
            res += backtracking(visited,i-1,tel,1)*4;
            res += backtracking(visited,i-1,tel,2)*4;
            res += backtracking(visited,i-1,tel,5);
        }
        return res;
    }
    
    int backtracking(int &visited,int remain,const vector<int> &tel,int start){
        if(remain<0)
            return 0;
        if(remain==0)
            return 1;
        bitset<32> b0(visited);
        //cout<<b0<<"   ";
        visited ^=(1<<start);
        //cout<<b0<<"   ";
        int res = 0;
        for(int i=1;i<=9;++i){
            int low = start>i?i:start;
            if(((visited>>i)&1)&&((tel[i]^tel[start])!=0||((visited>>((abs(start-i)>>1)+low))&1)==0)){
                res += backtracking(visited,remain-1,tel,i);
            }
        }
        visited |= (1<<start);
        //cout<<visited<<endl;
        return res;
    }
};
