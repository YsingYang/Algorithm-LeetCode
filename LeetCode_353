//My solution
class SnakeGame {
queue<pair<int,int>> que;
int width,height;
pair<int,int> position;
vector<vector<bool>> screen;
queue<pair<int,int>> body;
int size;
public:
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    SnakeGame(int width, int height, vector<pair<int, int>> food) {
        for(int i=0;i<food.size();++i){
            que.push(food[i]);
        }
        this->width = width;
        this->height = height;
        screen = vector<vector<bool>> (height,vector<bool>(width,false));
        this->position = {0,0};
        size = 0;
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    int move(string direction) {
        char c = direction[0];
        switch(c){
            case 'R':{
                if(position.second == width -1||screen[position.first][position.second+1]){
                   // position = {0,0};
                    return -1;
                }
                ++position.second;
                break;
            }
            case 'U':{
                if(position.first == 0||screen[position.first-1][position.second]){
                    //position = {0,0};
                    return -1;
                }
                --position.first;
                break;
            }
            case 'D':{
                if(position.first == height -1||screen[position.first+1][position.second]){
                    //position = {0,0};
                    return -1;
                }
                ++position.first;
                break;
            }
            case 'L':{
                if(position.second == 0||screen[position.first][position.second-1]){
                   // position = {0,0};
                    return -1;
                }
                --position.second;
                break;
            }
        }
        if(!que.empty()&&position.first == que.front().first&& position.second == que.front().second){
            que.pop();
            ++size;
            screen[position.first][position.second] = 1;
            body.emplace(position.first,position.second);
        }
        else if(!body.empty()){
            pair<int,int> temp = body.front();
            screen[temp.first][temp.second] = 0;
            body.pop();
            screen[position.first][position.second] = 1;
            body.emplace(position.first,position.second);
        }
        return size;
    }
};

//I make a mistask,In the first time the length of snake is '1', not the zero .@topcoder007 idea gave me inspiration.
class SnakeGame {
    deque<pair<int, int>> snake;
    set<pair<int, int>> body;
    vector<pair<int, int>> food;
    int m, n, fn;
    
public:
    SnakeGame(int width, int height, vector<pair<int, int>> food) {
        m = height, n = width, fn = 0;
        this->food = food;
        snake.emplace_back(0, 0);
    }
    
    int move(string direction) {
        int x = snake.front().first, y = snake.front().second;
        if (direction == "U") x --;
	else if (direction == "D") x ++;
	else if (direction == "L") y --;
	else if (direction == "R") y ++;
	auto xy = make_pair(x, y);
        if (fn < food.size() and xy == food[fn])
            fn ++;
        else {
            body.erase(snake.back());
            snake.pop_back(); 
        }
        if (x < 0 or x >= m or y < 0 or y >= n or body.count(xy))
            return -1;
        snake.push_front(xy);
        body.insert(xy);
        return fn;
    }
};
