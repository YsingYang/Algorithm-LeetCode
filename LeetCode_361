My o(m^2,n^2) Solution
class Solution {
public:
    int maxKilledEnemies(vector<vector<char>>& grid) {
        if(grid.empty())
            return 0;
        int rs = grid.size(),cs = grid[0].size(),res = 0;
        for(int i=0;i<rs;++i){
            for(int j=0;j<cs;++j){
                if(grid[i][j]=='0')
                    res = max(res,bomb(grid,i,j));
            }
        }
        return res;
    }
    
    int bomb(const vector<vector<char>> &grid,int x,int y){
        int rs = grid.size(),cs = grid[0].size(),boom = 0;
        int i=x-1;
        while(i>=0){
            if(grid[i][y]=='E')
                ++boom;
            else if(grid[i][y]=='W')
                break;
            --i;
        }
        i = x+1;
        while(i<rs){
            if(grid[i][y]=='E')
                ++boom;
            else if(grid[i][y]=='W')
                break;
            ++i;
        }
        int j = y-1;
        while(j>=0){
            if(grid[x][j]=='E')
                ++boom;
            else if(grid[x][j] == 'W')
                break;
            --j;
        }
        j = y+1;
        while(j<cs){
            if(grid[x][j]=='E')
                ++boom;
            else if(grid[x][j]=='W')
                break;
            ++j;
        }
        //cout<<endl;
        return boom;
    }
};

// approximate O(mn)solution posted by @StefanPochmann 
class Solution {
public:
    int maxKilledEnemies(vector<vector<char>>& grid) {
        if(grid.empty())    {
            return 0;
        }
        int rs = grid.size(),cs = grid[0].size();
        vector<int> colCount(cs,0);
        int rowCount,res = 0;
        for(int i=0;i<rs;++i){
            for(int j=0;j<cs;++j){
                if(j==0||grid[i][j-1]=='W'){
                    rowCount = 0;
                    for(int k=j;k<cs&&grid[i][k]!='W';++k){
                        rowCount += grid[i][k]=='E';
                    }
                }
                
                if(i==0||grid[i-1][j]=='W'){
                    colCount[j] = 0;
                    for(int k=i;k<rs&&grid[k][j]!='W';++k){
                        colCount[j] += grid[k][j] =='E';
                    }
                }
                if(grid[i][j]=='0')
                    res = max(res,rowCount+colCount[j]);
            }
        }
        return res;
    }
};
