//Easy idea 
class HitCounter {
queue<int> que;
public:
    /** Initialize your data structure here. */
    HitCounter() {
        
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    void hit(int timestamp) {
        que.push(timestamp+300);
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    int getHits(int timestamp) {
        while(!que.empty()&&que.front()<=timestamp){
            que.pop();
        }
        return que.size();
    }
};


//But we should consider the timestamp would increase very large,so we should use limted memory to cache the hit;
class HitCounter {
public:
    /** Initialize your data structure here. */
    HitCounter() {
        times.resize(300);
        hits.resize(300);
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    void hit(int timestamp) {
        int index = timestamp%300;
        if(times[index]!=timestamp){
            times[index] = timestamp;
            hits[index] = 1;
        }
        else{
            ++hits[index];
        }
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    int getHits(int timestamp) {
        int res = 0;
        for(int i=0;i<300;++i){
            if(timestamp - times[i]<300)
                res+=hits[i];
        }
        return res;
    }
private:
    vector<int> times,hits;
};
