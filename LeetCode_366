class Solution {
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> res;
        vector<int> sol;
        while(root!=NULL){
            //cout<<root->val<<endl;
            getLeaves(sol,root);
            res.push_back(sol);
            sol.clear();
        }
        return res;
    }
    
    void getLeaves(vector<int> &sol,TreeNode*& root){//It must use reference to modify root to nullptr
        if(root==nullptr)   return;
        if(root->left==nullptr&&root->right==nullptr){
            sol.push_back(root->val);
            root=nullptr;
            return;
        }
        getLeaves(sol,root->left);
        getLeaves(sol,root->right);
    }
};


//Impressive solution posted by @sky-xu

class Solution {
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> res;
        getLevel(root,res);
        return res;
    }
    
private:
    int getLevel(TreeNode* root,vector<vector<int>> &res){
        if(!root)
            return -1;
        int level = 1 + max(getLevel(root->left,res),getLevel(root->right,res));
        if(level>=res.size()){
            res.push_back({});
        }
        res[level].push_back(root->val);
        return level;
    }
};
