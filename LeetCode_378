//Using priority_queue is a easy way to solve this problem.But the runtime is too slow to not be satisfactory

class Solution {
private:
    struct node{
        int xindex;
        int yindex;
        int val;
        node(int x,int y,int v):xindex(x),yindex(y),val(v){}
    };
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int rs = matrix.size(),rc = matrix[0].size();
        auto compare = [](node a,node b){
            return a.val>b.val;
        };
        priority_queue<node,vector<node>,decltype(compare)> pq(compare);
        for(int i=0;i<rs;++i){
            pq.emplace(i,0,matrix[i][0]);
        }
        while(k!=1){
            node p = pq.top();
            pq.pop();
            if(p.yindex+1!=rc){
                pq.emplace(p.xindex,p.yindex+1,matrix[p.xindex][p.yindex+1]);
            }
            --k;
        }
        return pq.top().val;
    }
};

//In this problem , Binary search has a remarkable advantage . I consider it should called binary search count?- -

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n=matrix.size();
        int l=matrix[0][0], r=matrix[n-1][n-1], mid;
        while(l<r){
            mid=l+r>>1;
            int cnt=0, j=n-1;
            for(int i=0;i<n;i++){
                while(j>=0&&matrix[i][j]>mid)
                    j--;
                cnt+=j+1;
            }
            if(cnt<k)
                l=mid+1;
            else
                r=mid;
        }
        return l;
    }
};
