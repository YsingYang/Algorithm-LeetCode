//Randomized algorithm . But I have no idea how to improve its runtime , Maybe it's a question about efficient Randomization? 

class Solution {
vector<int> ori,ran;
public:
    Solution(vector<int> nums) {
        ori = ran = nums;
    }
    
    /** Resets the array to its original configuration and return it. */
    vector<int> reset() {
        return ori;
    }
    
    /** Returns a random shuffling of the array. */
    vector<int> shuffle() {
        int size=ran.size();
        for(int i=size-1;i>=1;--i){
            swap(ran[i],ran[rand()%(i+1)]);
        }
        return ran;
    }
};


class Solution(object):
    orginal, vec = [], []
    
    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.original = nums # 永远注意这是浅拷贝
        self.vec = self.original[:]
        
        

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        self.vec = self.original[:]
        return self.original

    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        for i in range (1, len(self.original)):
            index = random.randint(0, i)
            #print(i, index)
            self.vec[i], self.vec[index] = self.vec[index], self.vec[i]
        return self.vec
            
        
