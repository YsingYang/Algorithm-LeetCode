//runtime of brute search is O(n^2) ,divide and conquer is nlogn;why did it only spend 3ms ?

class Solution {
public:
    int longestSubstring(string s, int k) {
        return divide_and_conquer(s,0,s.size(),k);
    }
    
private:
    int divide_and_conquer(const string &s,int front,int rear,int k){
        if((rear-front)<k)
            return 0;
        vector<int> count(26);
        for(int i =front;i<rear;++i){
            ++count[s[i]-'a'];
        }
        for(int i=front;i<rear;++i){
            if(count[s[i]-'a']<k){
                return max(divide_and_conquer(s,front,i,k),divide_and_conquer(s,i+1,rear,k));
            }
        }
        return rear-front;
    }
};

//update
//It's more brilliant to use mask instead of for(26) @hxtang idea
int longestSubstring(string s, int k) {
   int max_len = 0;
   for (int first = 0; first+k <= s.size();) {
       int count[26] = {0};
       int mask = 0;
       int max_last = first;
       for (int last = first; last < s.size(); ++last) {
           int i = s[last] - 'a';
           count[i]++;
           if (count[i]<k) mask |= (1 << i);
           else   mask &= (~(1 << i));
           
           if (mask == 0) {
               max_len = max(max_len, last-first+1);
               max_last = last;
           }
       }
       first = max_last + 1;
   }
   return max_len;
}
