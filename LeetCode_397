
class Solution {
public:
    int integerReplacement(int n) {
        int count =INT_MAX;
        return min_step(n,0);
    }
    
    int min_step(int n,int step){
       // if(n<1) return INT_MAX;
        if(n==1)    return step;
        else if((n&1)==0){
            return min_step(n>>1,step+1);
        }
        else{
            return min(min_step(((n-1)>>1)+1,step+2),min_step((n-1)>>1,step+2));
        }
    }
};

/*using bit manipulation is more efficient method.
  Be careful INT_MAX,so you have to convert int to unsigned int at first.
  JAVA can use >>>1 to avoid this trap.
*/
class Solution {
public:
    int integerReplacement(int n) {
        int step = 0;
        unsigned int num = n;//有没有将int强制转换为unsigned int 的方法
        while(num!=1){
            if((num&1)==0)
                num>>=1;
            else if(num==3||(num&3)==1){//3 is an exception
                --num;
            }
            else{
                ++num;
            }
            ++step;
        }
        return step;
        
    }
};
