//My first solution


class Solution {
/***
  没有加入减枝的O(n^2)算法 ，dp[j]的set是表示该点下一步可以跳的step长度
*/
public:
    bool canCross(vector<int>& stones) {
        int size = stones.size();
        vector<set<int>> dp(size);
        dp[0] = {0,1};
        for(int i=1;i<size;++i){
            for(int j=i-1;j>=0;--j){
                int dist = stones[i]-stones[j];
                if(dp[j].find(dist)!=dp[j].end())
                    dp[i].insert({dist-1,dist,dist+1});
            }
        }
        /*for(auto it:dp){
            for(auto it2:it)
                cout<<it2<<"   ";
        }
        cout<<endl;*/
        return !dp[size-1].empty();
    }
};

class Solution {
/***
 * 加入减枝后的算法，有两种减枝策略，1 若stones[i] - stones[i-1] > i那么肯定位false的，因为假设每次选最大长度跳，到k点时也只能跳k+1长度
 * 2. !dp[j].empty()&&dist>*dp[j].cbegin() ：跟上一点类似，如果两点间长度大于上一点最大长度，可以判断为false,（小于可以继续循环搜索）
 * 
 * 
 */
public:
    bool canCross(vector<int>& stones) {
        int size = stones.size();
        vector<set<int>> dp(size);
        dp[0] = {0,1};
        for(int i=1;i<size;++i){
            for(int j=i-1;j>=0;--j){
                int dist = stones[i]-stones[j];
                if(stones[i] - stones[i-1] > i) return false; //key point !!
                if(dp[j].find(dist)!=dp[j].end())
                    dp[i].insert({dist-1,dist,dist+1});
                else if(!dp[j].empty()&&dist>*dp[j].cbegin()){
                   //执行
                    break;
                }
            }
        }
        return !dp[size-1].empty();
    }
};

//Solution posted by @odin 

class Solution {
public:
   unordered_set<int> set;
    bool dfs(int k, int pos, int destination)
    {
        if(pos > destination || set.find(pos) == set.end()) return false;
        if(pos == destination) return true;
        for(int i = 1; i >= -1; i--)
            if(k+i > 0 && dfs(k+i, pos+k+i, destination)) return true;
        return false;
    }
    bool canCross(vector<int>& stones) {
        int n = stones.size();
        if(n <= 1) return true;
        set.insert(0);
        for(int i = 1; i < n; i++)
        {
            set.insert(stones[i]);
            if(stones[i] - stones[i-1] > i) return false; //key point !!
        }
        return dfs(1, 1, stones[n-1]);
    }
};
