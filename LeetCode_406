class Solution {
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        vector<pair<int,int>> res;
        int size = people.size();
        if(size==0) return res;
        sort(people.begin(),people.end(),compare);
       /* for(auto i :people){
            cout<<i.first<<" : "<<i.second<<endl;
        }*/
        for(pair<int,int> *i=(&people[0]);i<=(&people[size-1]);++i){
            res.insert(res.begin()+i->second,*i);
        }
        return res;
    }

static bool compare(const pair<int,int> &a,const pair<int,int> &b){
        if(a.first==b.first)
            return a.second<b.second;
        return a.first>b.first;
    }
};

//The main point of this problem is how to use greedy method to solve it.That's why we should begin with the hightest people. 
