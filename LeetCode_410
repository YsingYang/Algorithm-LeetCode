class Solution {
private:
    bool doable (const vector<int>& nums, int cuts, long long max) {
        int acc = 0;
        for (auto num : nums) {
            // This step is unnecessary for this problem. I didn't discard this line because I want doable function more generalized.
            if (num > max) return false;//这一点基本不太可能，因为再筛选过程中已经把max选出来了
            
            else if (acc + num <= max) acc += num;//当acc+num还小于max的时候我们继续加
            else {
                --cuts;//直到不满足，这时候--cut,证明这里我们可以砍一刀
                acc = num;
                if (cuts < 0) return false;//如果砍的刀数过多，那么证明我们选的max值太小，所以对于mid应该往右移动
            }
        }
        return true;//如果刚刚好或者太少，返回 true,right = mid(注意不是mid+1),因为有可能是刚刚好的
    }
    
public:
    int splitArray(vector<int>& nums, int m) {
        long long left = 0, right = 0;
        for (auto num : nums) {
            left = max(left, (long long)num);
            right += num;
        }
        
        while (left < right) {
            long long mid = left + (right - left) / 2;///每次利用二分取中间的数放入max,即分成的数组之和不能超过不能超过该max
            if (doable(nums, m - 1, mid)) right = mid;//通过mid做max进行二分比较，
            else left = mid + 1;
        }
        return left;
    }
};
