/*
    其实跟之前想的差别不了多少，主要是一个地方想错了，如果碰到一个比当前st.top()高的，补仅仅是height[i] - st.top()，而是应该
    st.pop()后，取min(height[i],height[s.top()],- 刚刚pop出来的值，就是可以加水的槽，另外一点是，注意0也是要push进去的，不然3,0,2,1这样的case
    就与正确值不符合了

*/

class Solution {
public:
    int trap(vector<int>& height) {
        int water = 0, index = 0;
        stack<int> st;
        while(index < height.size()){
            if(st.empty() || height[index] <= height[st.top()]){
                st.push(index++); //如果比当前栈中最大的小, 放入栈中, 因为不形成井
            }
            else{
                int bottom = height[st.top()];
                st.pop();
                water += st.empty() ? 0 : (min(height[st.top()], height[index]) - bottom) * (index - st.top() - 1);
                //如果大于, 与栈中的元素肯定能形成坑, 那么需要把st.top()先pop出来(一定是栈中最小的), 加上height, 与st.top中可以形成坑的高度
                /* 如下
                    | ^ ^ |
                    | | * |
                    | | | |
                    | | | |
                    1 2 3 4
                    当index, 到4时, pop出3, 让3的高度2为 botton, 那么这里res += 就是min(h[4], [2]) - bottom的差 * (4 - 2 + 1)相对距离
                    上述中* 为第一次加上的水容量, ^为第二次(pop出二加上的水容量)
                
                */
            }
        }
        return water;
    }
};

/*
    Two point 方法，每次选取一个最小的值，与level做比较，这一level算是除去最大值外能作为障碍的一个点
    通过level - lower能得到每个点能加入水的高度

*/

class Solution {
public:
    int trap(vector<int>& height) {
        int l=0,r = height.size()-1;
        int res =0,level=0,lower =0;
        while(l<=r){
            lower = height[height[l]>height[r]?r--:l++];
            level = max(level,lower);
            res += (level - lower);
        }
        return res;
    }
};


/*
  Solution-3 ,其实为solution-2复杂化的解决方法，思路差不多, 因为这种方法单向搜索会导致0,0,0,1,0,0,0这种情况下1是没有用的, 所以我们需要在左右都
  找到一个最大值, Two pointer在这里是个非常好的选择
*/

class Solution {
public:
    int trap(vector<int>& height) {
        int left = 0,right = height.size()-1,res = 0;
        int maxLVal=0,maxRVal=0;
        while(left<=right){
            if(height[left]<=height[right]){
                if(height[left]<maxLVal){
                    res += maxLVal - height[left];
                }
                else{
                    maxLVal = height[left];
                }
                ++left;
            }
            else{
                if(height[right]<maxRVal){
                    res += maxRVal - height[right];
                }
                else{
                    maxRVal = height[right];
                }
                --right;
            }
        }
        return res;
    }
};
