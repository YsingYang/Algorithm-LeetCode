class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1)  return l2;
        if(!l2)  return l1;
        ListNode *last = l1,*now;
        l1 = l1->next;
        last ->next =nullptr;
        //reverse
        while(l1!=nullptr){
            now = l1;
            l1 = l1->next;
            now ->next = last;
            last = now;
        }
        l1 = now?now:last;
        
        last = l2;
        l2 = l2->next;
        last ->next = nullptr;
        now = nullptr;
        while(l2){
            now = l2;
            l2 = l2->next;
            now ->next = last;
            last = now;
        }
        l2 = now?now:last;
        
        int carry =0;
        ListNode *head = new ListNode(0);
        now = head;
        while(l1||l2){
            int temp = carry;
            if(l1){
                temp +=l1->val;
                l1 = l1->next;
            }
            if(l2){
                temp += l2 ->val;
                l2 = l2->next;
            }
            ListNode *t = new ListNode(temp % 10);
            carry = temp /10;
            now->next = t;
            now = t;
        }
        if(carry){
            ListNode *t = new ListNode(1);
            now -> next = t;
        }
        last = head ->next;
        head = head->next->next;
        last->next = nullptr;
        while(head){
            now = head;
            head = head ->next;
            now->next = last;
            last = now;
        }
        head = now;
        return head;
    }
};
//Maybe we should write a funtion to reverse_list..I consider it would make the solution more consice..

/*
  Using stack is a common idea , @jade86 posted a brilliant idea 
*/
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int n1 = 0, n2 = 0, carry = 0;
        ListNode *curr1 = l1, *curr2 = l2, *res = NULL;
        while( curr1 ){ curr1=curr1->next; n1++; }
        while( curr2 ){ curr2=curr2->next; n2++; } 
        curr1 = l1; curr2 = l2;
        while( n1 > 0 && n2 > 0){
            int sum = 0;
            if( n1 >= n2 ){ sum += curr1->val; curr1=curr1->next; n1--;}
            if( n2 > n1 ){ sum += curr2->val; curr2=curr2->next; n2--;}
            res = addToFront( sum, res );
        }
        curr1 = res; res = NULL;
        while( curr1 ){
            curr1->val += carry; carry = curr1->val/10;
            res = addToFront( curr1->val%10, res );
            curr2 = curr1; 
            curr1 = curr1->next;
            delete curr2;
        }
        if( carry ) res = addToFront( 1, res );
        return res;
    }
    ListNode* addToFront( int val, ListNode* head ){
        ListNode* temp = new ListNode(val);
        temp->next = head;
        return temp;
    }
  }
