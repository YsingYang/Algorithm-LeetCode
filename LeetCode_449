//preorder solution ,beat 67%,

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s;
        if(root){
            s= s +to_string(root->val) + ',';
            s+=serialize(root->left);
            s+=serialize(root->right);
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int pos = 0;
        return reBST(data,INT_MAX,INT_MIN,pos);
    }
    
    TreeNode* reBST(const string &s,int upper,int lower,int &pos){//pos is an reference
        
        int size = s.size();
        int curpos = pos;
        if(pos==size)
            return nullptr;
        int number = 0;
        while(s[curpos]!=','){
            number = number *10 + s[curpos++] - '0';
        }
        ++curpos;
        if(number<lower||number>upper)  return nullptr;//避免pos++过头;
        
        pos = curpos;//It's importance that we mush Assign curpos to pos after above Judgment,if not . pos would be in >upper
        
        TreeNode *root = new TreeNode(number);
        root->left = reBST(s,number,lower,pos);
        root->right = reBST(s,upper,number,pos);
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));


//using ostringstream instead of string , beat 99!!??, Being used in String stitching by os have Signficant improvement
class Codec {
public:

    // Encodes a tree to a single string.
     // Encodes a tree to a single string.
    void serialize(TreeNode* root, ostringstream& out )
    {
        if ( !root ) return;
        out << root->val << ",";
        serialize(root->left, out);
        serialize(root->right, out);
    }
    
    string serialize(TreeNode* root) {
        ostringstream ss;
        serialize(root, ss);
        return ss.str();//ostringstream 拼接比string 直接拼接要快很多
    }

    TreeNode* deserialize(const string& s, int lower, int upper, int & pos )
    {
        // pos is a variable to record the end of decoded buffer 
        if ( pos == s.size() ) return nullptr;
        int cur_pos = pos;
        int number = 0;
        while( s[cur_pos] != ',')
        {
            number = number * 10 + s[cur_pos] - '0';
            ++cur_pos;
        }
        ++cur_pos;
        // The next number is not part of current subtree, should return nullptr
        if ( number < lower || number > upper ) return nullptr;

        TreeNode* root = new TreeNode( number );
        pos = cur_pos; // update pos 
        root->left =  deserialize( s, lower, root->val, pos );
        root->right = deserialize( s, root->val, upper, pos );
        return root;
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int pos = 0;
        return deserialize( data, INT_MIN, INT_MAX, pos );
        
    }
};
