//We must optimazed solution as much as possible,otherwise we would get TLE
thanks for @withacup sharing his process of thinking
class Solution {
public:
    bool makesquare(vector<int>& nums) {
        if(nums.empty())    return false;
        int sum = accumulate(nums.begin(),nums.end(),0);
        if(sum%4!=0)
            return false;
        int numcount=0,length = sum>>2;
        vector<int> square(4,length);
        sort(nums.begin(),nums.end(),[](int &a,int &b){return a>b;});
        return dfs(nums,square,0);
    }
    
    bool dfs(vector<int>& nums,vector<int> &square,int index){
        if(index == nums.size())
            return square[0] ==square[1]&&square[1]==square[2]&&square[2]==square[3];
        for(int i=0;i<4;++i){
            if(square[i]-nums[index]<0)
                continue;
            int j = i;
            while (--j >= 0) // third
                if (square[i] == square[j]) 
                    break;
            if (j != -1) continue;
            square[i]-= nums[index];
            if(dfs(nums,square,index+1))
                return true;
            square[i] += nums[index];
        }
        return false;
    }
};
