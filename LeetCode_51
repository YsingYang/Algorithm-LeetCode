class Solution {
/**
 *   相对比较好实现的backtring 方法，
 *    按照行/列的顺序一次一行/一列排序，每次放入N时，先check位置是否可行
 *   不行跳入下一个位置
 * 
 */
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> ans(n,string(n,'.'));
        backtracking(res,ans,0,n);
        return res;
        
    }
    
    void backtracking(vector<vector<string>> &res,vector<string> &ans,int col,const int &n){
        if(col==n){
            res.push_back(ans);
            return;
        }
        for(int i=0;i<n;++i){
            if(checkBoard(ans,i,col,n)){
                ans[i][col] = 'Q';
                backtracking(res,ans,col+1,n);
                ans[i][col] = '.';
            }
        }
    }
    
    bool checkBoard(const vector<string> &str,int row,int col,int n){
        //仅需比较之前的行,列似乎不用比较，因为我是在列中寻找位置的，还有斜方向的判断。
        
        //check thisrow 
        for(int i=0;i<col;++i){
            if(str[row][i]=='Q')
                return false;
        }
        //check diag
        for(int i=row+1,j=col-1;j>=0&&i<n;--j,++i){//注意边界问题
            if(str[i][j]=='Q')
                return false;
        }
        
        //check back-diag
        for(int i=row-1,j=col-1;j>=0&&i>=0;--j,--i){//同上
            if(str[i][j]=='Q')
                return false;
        }
        return true;
    }
};
