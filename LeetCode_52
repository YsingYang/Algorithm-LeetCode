class Solution {
/*
  跟51类似。。（简直没有改变）
*/
public:
    int totalNQueens(int n) {
        vector<string> ans(n,string(n,'.'));
        int res = 0;
        backtracking(res,ans,0,n);
        return res;
        
    }
    
    void backtracking(int &res,vector<string> &ans,int col,const int &n){
        if(col==n){
            ++res;
            return;
        }
        for(int i=0;i<n;++i){
            if(checkBoard(ans,i,col,n)){
                ans[i][col] = 'Q';
                backtracking(res,ans,col+1,n);
                ans[i][col] = '.';
            }
        }
    }
    
    bool checkBoard(const vector<string> &str,int row,int col,int n){
        //仅需比较之前的行,列似乎不用比较，因为我是在列中寻找位置的，还有斜方向的判断。
        
        //check thisrow 
        for(int i=0;i<col;++i){
            if(str[row][i]=='Q')
                return false;
        }
        //check diag
        for(int i=row+1,j=col-1;j>=0&&i<n;--j,++i){//注意边界问题
            if(str[i][j]=='Q')
                return false;
        }
        
        //check back-diag
        for(int i=row-1,j=col-1;j>=0&&i>=0;--j,--i){//同上
            if(str[i][j]=='Q')
                return false;
        }
        return true;
    }
};
