class Solution {
/********************************

  先对序列按start进行排序, 然后遍历序列合并即可

*********************************/
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        // write your code here
        if(intervals.empty())
            return vector<Interval>();
        sort(intervals.begin(), intervals.end(), [](const Interval& p1, const Interval& p2){
           if(p1.start == p2.start){
               return p1.end < p2.end;
           } 
           return p1.start < p2.start;
        });
        vector<Interval> res;
        Interval pre = intervals[0];
        
        for(int i = 1; ; ++i){
            if(i == intervals.size()){
                res.emplace_back(pre);
                return res;
            }
            if(intervals[i].start > pre.end){
                res.emplace_back(pre);
                pre = intervals[i];
            }
            else{
                pre.end = max(pre.end, intervals[i].end);
            }
        }
    }
};

#Python Solution
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        from operator import attrgetter
        if not intervals:
            return []
        
        intervals = sorted(intervals, key = lambda k : k.start)
        pre = intervals[0]
        #print(pre.start, pre.end)
        res = []
        for i in range(1, len(intervals)):
            if intervals[i].start <= pre.end:
                pre.end = max(pre.end, intervals[i].end)
            else:
                res.append(pre)
                pre = intervals[i]
        res.append(pre)
        return res
            
            
More Concise Python shared by  StefanPochmann
def merge(self, intervals):
    out = []
    for i in sorted(intervals, key=lambda i: i.start):
        if out and i.start <= out[-1].end:
            out[-1].end = max(out[-1].end, i.end)
        else:
            out += i,
    return out
