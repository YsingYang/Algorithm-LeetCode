class Solution {
/**
简单的DP推倒过程,需要注意的是不要遗漏掉反对角线上的线
**/
public:
    int longestLine(vector<vector<int>>& M) {
        if(M.empty())
            return 0;
        int rs = M.size(),cs = M[0].size();
        vector<vector<vector<int>>> state(rs,vector<vector<int>>(cs,vector<int>(4,0))); //上 左 左上,右上
        int res = 0;
        for(int i = 0 ; i < rs ; ++i){
            for(int j = 0 ; j < cs ; ++j){
                if(M[i][j] == 1){//执行
                    state[i][j][0] = i > 0 && M[i-1][j] == 1 ? state[i-1][j][0] + 1 : 1;
                    state[i][j][1] = j > 0 && M[i][j-1] == 1 ? state[i][j-1][1] + 1 : 1;
                    state[i][j][2] = i > 0 && j > 0 && M[i-1][j-1] == 1 ? state[i-1][j-1][2] + 1 : 1;
                    state[i][j][3] = i > 0 && j < cs -1 && M[i-1][j+1] == 1 ? state[i-1][j+1][3] + 1 : 1;
                    res = max(res,max(state[i][j][0],max(state[i][j][1],state[i][j][2])));
                    res = max(res,state[i][j][3]);
                }
            }
        }
        return res;
    }
};
