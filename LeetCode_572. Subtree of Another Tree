#Python Solution相当于递归遍历,效率低,可以用对S做二叉树的先序遍历,然后遇到相同再与tsame操作
class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        if not s :
            return False
        if self.isSame(s,t) :
            return True
        return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
    
    def isSame(self, s, t):
        if not (s or t):
            return True
        if (not (s and t)) or (s.val != t.val):
            return False
        return self.isSame(s.left, t.left) and self.isSame(s.right, t.right)
