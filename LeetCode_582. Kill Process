class Solution {
/***
  C++ Solution
***/
public:
    vector<int> killProcess(vector<int>& pid, vector<int>& ppid, int kill) {
        unordered_map<int,vector<int>> mp;
        int size = ppid.size();
        for(int i = 0; i < size; ++i){
            mp[ppid[i]].push_back(pid[i]);
        }
        queue<int> que;
        que.push(kill);
        vector<int> res;
        while(!que.empty()){
            int temp = que.front();
            res.push_back(temp);
            que.pop();
            if(mp.find(temp) != mp.end()){
                for(int i = 0; i < mp[temp].size(); ++i){
                    que.push(mp[temp][i]);
                }
            }
        }
        return res;
    }
};

//Python Solution, Stack Solution
class Solution(object):
    def killProcess(self, pid, ppid, kill):
        """
        :type pid: List[int]
        :type ppid: List[int]
        :type kill: int
        :rtype: List[int]
        """
        child = collections.defaultdict(list)
        res = []
        for i, j in zip(pid, ppid):
            child[j].append(i)
        stack = [kill]
        while stack:
            current = stack.pop()
            res.append(current)
            stack += child[current] #注意list的加是对每个元素都append进去
        return res

class Solution(object):
#Deque Solution
    def killProcess(self, pid, ppid, kill):
        """
        :type pid: List[int]
        :type ppid: List[int]
        :type kill: int
        :rtype: List[int]
        """
        child = collections.defaultdict(list)
        res = []
        for i, j in zip(pid, ppid):
            child[j].append(i)
        que = collections.deque([kill])
        while que:
            current = que.popleft()
            res.append(current)
            que += child[current] #注意list的加是对每个元素都append进去
        return res
        
        
