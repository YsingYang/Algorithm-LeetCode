class Solution {
/**
 * 最长公共子序列变种题
 */
public:
    int minDistance(string word1, string word2) {
        int s1 = word1.size(), s2 = word2.size();
        vector<vector<int>> dp(s1+1, vector<int>(s2+1, 0));
        for(int i = 1; i <= s1; ++i){
            for(int j = 1; j <= s2; ++j){
                if(word1[i-1] == word2[j-1]){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }
                else{
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return s1 + s2 - 2 * dp[s1][s2];
    }
};

Python Solution
class Solution:
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        s1, s2 = len(word1), len(word2)
        dp = [[0] * (s2 + 1) for _ in range(s1 + 1)]
        for i in range(1, s1 + 1):
            for j in  range (1, s2 + 1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                
        return s1 + s2 - 2 * dp[s1][s2]
