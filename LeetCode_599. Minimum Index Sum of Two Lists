class Solution {
public:
    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
        unordered_map<string, int> mp;
        for(int i = 0; i < list1.size(); ++i){
            mp[list1[i]] = i;
        }
        int minIndex = INT_MAX;
        vector<string> res;
        for(int i = 0; i < list2.size(); ++i){
            if(mp.find(list2[i]) != mp.end() && mp[list2[i]] + i <= minIndex){ //找到相同
                if(mp[list2[i]] + i < minIndex){
                    res.clear();
                    minIndex = mp[list2[i]] + i;
                }
                res.push_back(list2[i]);
            }
        }
        return res;
    }
};


//Python Solution - 1
class Solution:
    def findRestaurant(self, list1, list2):
        """
        :type list1: List[str]
        :type list2: List[str]
        :rtype: List[str]
        """
        mp = {}
        for i, num in enumerate(list1):
            mp[num] = i
        res, minimum = [], pow(2, 31)
        for i, num in enumerate(list2):
            #print(i, num)
            if num in mp and mp[num] + i <= minimum: 
                if mp[num] + i < minimum:
                    minimum = mp[num] + i
                    res = []
                res.append(num)
        
        return res
        

//Python Solution - 2
class Solution:
    def findRestaurant(self, list1, list2):
        """
        :type list1: List[str]
        :type list2: List[str]
        :rtype: List[str]
        """
        common = set(list1) & set(list2)
        counter = collections.defaultdict(int)
        for i, s in enumerate(list1):
            counter[s] += i
        
        for i, s in enumerate(list2):
            counter[s] += i
        
        m = min(counter[s] for s in common)
        return [s for s in common if counter[s] == m]
      
