class task{
public:
    task(char id_, int waitTime_, int count_):id(id_), waitTime(waitTime_), count(count_){}

    char id;
    int waitTime;
    int count;
};

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        map<char, task*> taskQueue;
        for(int i = 0; i < tasks.size(); ++i){
            if(taskQueue.find(tasks[i]) == taskQueue.end()){
                taskQueue[tasks[i]] = new task(tasks[i], 0, 1);
            }
            else{
                ++taskQueue[tasks[i]]->count;
            }
        }
        int finish = 0;
        while(!taskQueue.empty()){
            ++finish;
            decltype(taskQueue.begin()) index = taskQueue.end();
            for(auto it = taskQueue.begin(); it != taskQueue.end(); ++it){
                if(it->second->waitTime == 0 && (index == taskQueue.end() || index->second->count < it->second->count)){
                    index  = it;
                }
                if(it->second->waitTime != 0){
                    --it->second->waitTime;
                }
            }
            if(index != taskQueue.end()){
                if(--index->second->count == 0){
                    taskQueue.erase(index);
                    continue;
                }
                index->second->waitTime = n;
            }
        }
        return finish;
        
    }
};


class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> mp(26, 0); //一共26个字母
        for(auto &s : tasks){
            ++mp[s-'A'];//记录各自Task的个数
        }
        sort(mp.begin(), mp.end());
        int finishTime = 0;
        while(mp[25] > 0){
            for(int i = 0; i < 26; ++i){
                cout<<mp[i]<<"  "; 
            }
            cout<<endl;
            int i = 0;
            while(i <= n){
                if(mp[25] == 0 && mp[25 - i] == 0) //确保当i <= n 的时候才break, (除非是最后一个task, 否则不break)
                    break;
                if(i < 26 && mp[25 - i] > 0){ //如果i 扔在运行, 且25-i没有任务, 则直接跳过这一步
                    --mp[25 - i];
                }
                ++finishTime;
                ++i;
            }
            sort(mp.begin(), mp.end());
        }
        return finishTime;
    }
};
