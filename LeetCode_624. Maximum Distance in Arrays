class Solution {
public:
    int maxDistance(vector<vector<int>>& arrays) {
        multimap<int, int> maxMp;
        for(int i = 0; i < arrays.size(); ++i){
            maxMp.emplace(arrays[i].back(), i);
            if(maxMp.size() > 2)
                maxMp.erase(maxMp.begin());
        }
        multimap<int, int> minMp;
        for(int i = 0; i < arrays.size(); ++i){
            minMp.emplace(arrays[i].front(), i);
            if(minMp.size() > 2)
                minMp.erase(--minMp.end());
        }
        
        if(maxMp.rbegin()->second == minMp.begin()->second){
            return max(abs(maxMp.rbegin()->first - minMp.rbegin()->first), abs(maxMp.begin()->first - minMp.begin()->first));
        }
        return abs(maxMp.rbegin()->first - minMp.begin()->first);
    }
};

//优化空间后的算法，
class Solution {
public:
    int maxDistance(vector<vector<int>>& arrays) {
        int res = INT_MIN;
        int maxVal = arrays[0].back();
        int minVal = arrays[0].front(); //首先记录下最大最小值
        for(int i = 1; i < arrays.size(); ++i){
            res = max(res, abs(maxVal - arrays[i].front())); //算出当前最大最小值， 与之前最大最小值得最大差
            res = max(res, abs(minVal - arrays[i].back()));
            maxVal = max(maxVal, arrays[i].back()); //更新最大最小值
            minVal = min(minVal, arrays[i].front());
        }
        return res;
    }
};
