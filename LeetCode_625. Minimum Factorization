class Solution {
public:
    int smallestFactorization(int a) {
        if(a < 10)
            return a;
        int factor =  a >> 1;
        string s;
        vector<char> candidate;
        for(int factor = 9; factor > 1 && a != 1; -- factor){
            while(a % factor == 0){
                candidate.push_back(factor + '0');
                a /= factor;
            }
        }
        if(candidate.empty() || a != 1)
            return 0;
        for_each(candidate.rbegin(), candidate.rend(), [&s](const char &c){
            s += c; 
        });
        return s.empty() || stoll(s) > INT_MAX ? 0 : stoi(s);
    }
};

//重新修改了一下
/**********************************************
思路. 注意阅读题目, 题目要求是该postive num要由个位数, 所以22也是要返回0的(22 = 2 * 11)不能组成合法的答案
1. 首先我们需要找到该数的每个因子, 放入candidate中 (这里有个优化的, 可以用个vector<int>(10)来记录相应数字因子的数即可)
2. 如果candidate数组为空, 或者说a没有被整除完, 则返回0
3. 最后将candidate组合成一起, 看是否>INT_MAX,决定返回结果

***********************************************/
class Solution {
public:
    int smallestFactorization(int a) {
        if(a < 10)
            return a;
        vector<char> candidate;
        for(int factor = 9; factor > 1 && a != 1; -- factor){
            while(a % factor == 0){
                candidate.push_back(factor + '0');
                a /= factor;
            }
        }

        if(candidate.empty() || a != 1) 
            return 0;//unable to find candidate  or  factors doesn't consist of 2~9, like 22 = 2 * 11

        string s;
        for_each(candidate.rbegin(), candidate.rend(), [&s](const char &c){
            s += c; 
        });
        return stoll(s) > INT_MAX ? 0 : stoi(s);
    }
};

//再优化, 如果很大的数可以更少的空间
class Solution {
public:
    int smallestFactorization(int a) {
        if(a < 10)
            return a;
        vector<int> candidate(10); //分别记录0~9数字个数
        for(int factor = 9; factor > 1 && a != 1; -- factor){
            while(a % factor == 0){
                ++candidate[factor];
                a /= factor;
            }
        }
        if(a != 1)
            return 0;
            
        string s;
        int idx = 0; 
        for_each(candidate.begin(), candidate.end(), [&s, &idx](const int &count){
            s += string(count, (idx++ + '0')); 
        });
        
        return stoll(s) > INT_MAX ? 0 : stoi(s);
    }
};
