class Solution {
//注意会出现0 ..一个最笨的方法..穷举..暂时不想优化..
public:
    int numDecodings(string s) {
        vector<long> dp(s.size() + 1);
        dp[0] = 1;
        dp[1] = s[0] == '0' ? 0 : s[0] == '*' ? 9 : 1;
        for(int i = 2; i <= s.size(); ++i){
            if(s[i-1] != '*'){
                if(s[i-2]  == '*'){
                    if(s[i-1] > '6'){
                        dp[i] = (dp[i-2] + dp[i-1])  % mod;
                    }
                    else{
                        dp[i] = s[i-1] == '0' ? (dp[i-2] * 2) % mod : ((dp[i-2] + dp[i-2] ) % mod + dp[i-1]) % mod;// 1x , 2x , x
                    }
                }
                else if(s[i-2] == '1' || (s[i-2] == '2' && s[i-1] >= '0' && s[i-1] <= '6')){
                    dp[i] = s[i-1] == '0' ? dp[i-2] % mod: (dp[i-1] + dp[i-2]) % mod;
                }
                else{
                    dp[i] = s[i-1] == '0' ? 0 : dp[i-1] % mod ;
                }
            }
            else{ //=='*'
                if(s[i-2] == '*'){ //前* 后*
                    dp[i] = (dp[i-2] * 15 % mod + dp[i-1] * 9  % mod) % mod;
                }
                else if(s[i-2] == '1'){
                    dp[i] = ((dp[i-2] * 9 % mod) + dp[i-1] * 9) % mod;  
                }
                else if(s[i-2] == '2'){
                    dp[i] = (dp[i-2] * 6 % mod + dp[i-1] * 9 ) % mod; 
                }
                else{
                    dp[i] = (dp[i-1]) * 9 % mod;
                }
            }
        }
        return dp.back();
    }
private:
    const int mod = pow(10, 9) + 7;
};
