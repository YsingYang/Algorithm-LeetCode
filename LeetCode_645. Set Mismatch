class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        vector<int> res(2, 0);
        int size = nums.size();
        vector<int> count(size + 1, 0);
        for(int i = 0; i < size; ++i){
            ++count[nums[i]];
        }
        for(int i = 1; i <= size; ++i){
            if(count[i] == 2)
                res[0] = i;
            else if(count[i] == 0){
                res[1] = i;
            }
        }
        return res;
        
    }
};

//优化至O(1) space
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        //因为数组是固定为1-n的数, 所以我们可以根据这个来减少空间的使用
        vector<int> res(2, 0);
        for(int  i = 0; i < nums.size(); ++i){
            if(nums[abs(nums[i])-1] < 0){ //重复的
                res[0] = abs(nums[i]);
            }
            else{
                nums[abs(nums[i])-1] *= -1;//标记为来过
            }
        }
        
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] > 0){ //没有数来过
                res[1] = i + 1;
            }
        }
        return res;
    }
};
