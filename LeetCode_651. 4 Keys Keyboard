class Solution {
/*****


一开始想得太多了，　中间ca,cc这两种状态完全是可以去掉的
所以对于+A状态，　直接为上一个+A, 或者为当前+v后的最大值(注意这里, 我开始以为是上一个+V与上一个+A最大值 +　1, 这个递推其实是不对的,或者说+v, 一定要选取当前step, +A, +v的最大值)

******/
public:
    int maxA(int N) {
        vector<vector<int>> dp(N + 1, vector<int>(2, 0)); //dp[][0]为添a, dp[][1]为cv
        for(int i = 1; i <= N; ++i){
            if(i >= 4){
                for(int j = i; j >= 3; --j){
                    dp[i][1] = max(dp[i][1], dp[j-3][0] * (i - j + 2));
                }
            }
            dp[i][0] = max(dp[i-1][0] + 1, dp[i][1]); 
        }
        return max(dp[N][0], dp[N][1]);
    }
};


//对于O(n)算法, 其实只是一个简单的数学技巧, 对于ca,cc,cv操作, 最大值为下面3个dp的最大值之中
public int maxA(int N) {
    if (N <= 6)  return N;
    int[] dp = new int[N + 1];
    for (int i = 1; i <= 6; i++) {
      dp[i] = i;
    }
    for (int i = 7; i <= N; i++) {
      dp[i] = Math.max(dp[i - 4] * 3, dp[i - 5] * 4);
      // dp[i] = Math.max(dp[i - 4] * 3, Math.max(dp[i - 5] * 4, dp[i - 6] * 5));
    }
    return dp[N];
  }
