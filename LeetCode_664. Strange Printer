class Solution {
public:
    int strangePrinter(string s) {
        int size = s.size();
        if(s.empty())
            return 0;
        vector<vector<int>> dp(size, vector<int>(size, 0));
        for(int i = 0; i < size; ++i){
            dp[i][i] = 1;// 初始化
        }
        for(int i = 1; i < size; ++i){ //length;
            for(int start = 0; start < size - i; ++start){
                dp[start][start + i] = i + 1; //对每一个当前计算的状态初始化, 最坏情况为 i + 1
                for(int mid = start + 1; mid <= start + i; ++mid){
                    int temp = dp[start][mid-1] + dp[mid][start+i];
                    if(s[mid-1] == s[start + i]){ //当当前的merge的前一块与后一块的最后一个相同时, 可以--temp, (可为同一序列)
                        --temp;
                    }
                    dp[start][start+i] = min(dp[start][start+i], temp);
                }
            }
        }
        return dp[0][size-1];
    }
};
