
class Solution {
    /**
        发现一个挺重要的问题。
        当我们调用algorithm的lower_bound与upper_bound的时候， 默认调用的应该是O(N)时间复杂度的算法
        所以在set中自己有一个lower_bound与upper_bound, 使用的O(lgn)的时间复杂度的算法
        
        另外其实下方的算法还是有可优化的地方的， 因为在insert下返回的是一个pair<iterator, bool> 类型， 取出first即可得到相应的迭代器， 题目也说没有重复的。 所以不需要话费多2(lgn)的操作
    
    **/
public:
    int kEmptySlots(vector<int>& flowers, int k) {
        int N = flowers.size(); //N
        set<int> bloomFlower; 
        for(int i = 0; i < N; ++i) {
            bloomFlower.insert(flowers[i]); //插入第i天开花的情况
            //每次只用检测插入flower左右是否满足条件即可
            auto lower = bloomFlower.lower_bound(flowers[i]);
            auto upper = bloomFlower.upper_bound(flowers[i]);
            if((lower != bloomFlower.begin() && *lower - *next(lower, -1) - 1 == k) || (upper != bloomFlower.end() && *upper - *lower - 1 == k)) {
                return i + 1;
            } 
        
        }
        return -1;
    }
};


/***

    Sliding windows
    
    思路很简单， 保证一个sliding windows, 宽度为k + 2
    在该windows中， 保证left, right 中间的所有pos的花都开在这两点之后， 那么， 这两点满足题目要求
    
***/

class Solution {
public:
    int kEmptySlots(vector<int>& flowers, int k) {
        //flowers 表示的是day -> pos. 该方法需要一个pos -> day的数组
        int size = flowers.size();
        vector<int> days(size);
        for(int i = 0; i < size; ++i) {
            days[flowers[i]-1] = i + 1; // 注意flowers的值范围是1-N
        }
        int left = 0, right = k + 1, result = INT_MAX; // 我们需要在left, right， 如果left, right中的所有pos的花都开在left, right之后， 该点满足
        for(int i = 0; right < size; ++i) {
            if(days[i] < days[left] || days[i] <= days[right]){
                if(i == right){ //相当于便利完中间的点
                    result = min(result, max(days[left], days[right]));
                }
                left = i;
                right = i + k + 1;
            }
        }
        return result == INT_MAX ? -1 : result;
        
    }
};
