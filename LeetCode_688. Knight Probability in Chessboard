class Solution {
    /**
    * 这道题最大的疑问点在于精度的控制问题， 这里不能用int 与longlong, 因为没有办法表示到pow(8, 100)的数， 所以这里需要用到double.
      dp情况有两种方式第一种方式从起始点开始推到最后一步， 加上所有可达点
      第二种方式， 初始最终为全1的2d-vector, 逆推到r, c（即next数组等于dp数组中所以可到达next[i][j] 的点的和）最终返回的是dp[r][c]， 从效率上说应该是第二种方式比较快
    
    **/
public:
    double knightProbability(int N, int K, int r, int c) {
        vector<vector<double>> dp(N, vector<double> (N, 1));
        for(int step = 0; step < K; ++step){
            vector<vector<double>> next(N, vector<double>(N, 0));
            for(int i = 0; i < N; ++i){
                for(int j = 0; j < N; ++j){
                    for(int d = 0; d < directions.size() - 1; ++d){
                        int nx = i + directions[d];
                        int ny = j + directions[d+1];
                        if(nx < 0 || nx >=N || ny < 0 || ny >= N){
                            continue;
                        }
                        next[i][j] += dp[nx][ny];
                    }
                }
            }
            swap(next, dp);
        }
        return dp[r][c] / pow(8, K);
    }
private:
    vector<int> directions = {2, -1, 2, 1, -2, -1, -2, 1, 2};
};
