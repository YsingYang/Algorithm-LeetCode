class Solution {
/*********
BFS
**********/
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        if(grid.empty())
            return 0;
        rs = grid.size();
        cs = grid[0].size();
        int res = 0;
        for(int i = 0; i < grid.size(); ++i){
            for(int j = 0; j < grid[0].size(); ++j){
                if(grid[i][j] == 1){
                    res = max(res, bfsSearch(grid, i, j));
                }
            }
        }
        return res;
    }
    
    int bfsSearch(vector<vector<int>>& grid, int i, int j) {
        queue<pair<int, int>> que;
        que.emplace(i, j);
        grid[i][j] = 2; //visited过的1改成2
        int sum = 0;
        while(!que.empty()) {
            pair<int, int> temp = que.front();
            que.pop();
            ++sum;
            for(int i = 0; i < direction.size() - 1; ++i){
                int nx = temp.first + direction[i], ny = temp.second + direction[i+1];
                if(nx < 0 || nx >= rs || ny < 0 || ny >= cs || grid[nx][ny] != 1){
                    continue;
                }
                grid[nx][ny] = 2;
                que.emplace(nx, ny);
            }
        }
        return sum;
    }
private:
    int rs;
    int cs;
    vector<int> direction = {1, 0, -1, 0, 1};
};


/********

DFS 

*********/

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int max_area = 0;
        for(int i = 0; i < grid.size(); i++)
            for(int j = 0; j < grid[0].size(); j++)
                if(grid[i][j] == 1)max_area = max(max_area, AreaOfIsland(grid, i, j));
        return max_area;
    }
    
    int AreaOfIsland(vector<vector<int>>& grid, int i, int j){
        if( i >= 0 && i < grid.size() && j >= 0 && j < grid[0].size() && grid[i][j] == 1){
            grid[i][j] = 0;
            return 1 + AreaOfIsland(grid, i+1, j) + AreaOfIsland(grid, i-1, j) + AreaOfIsland(grid, i, j-1) + AreaOfIsland(grid, i, j+1);
        }
        return 0;
    }
