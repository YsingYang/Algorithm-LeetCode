//Edit Distance经典问题，跟背包问题类似的经典问题

//Solution_1  使用O（n × m)的空间
class Solution {
public:
    int minDistance(string word1, string word2) {
        int w1 = word1.size(),w2 = word2.size();
        vector<vector<int>> dp(w1+1,vector<int>(w2+1,0));
        for(int i=1;i<=w1;++i){
            dp[i][0] = i;//w2 为空是dist
        }
        for(int j=1;j<=w2;++j){
            dp[0][j] = j;//当w1为空时的dist
        }
        
        for(int i=1;i<=w1;++i){
            for(int j=1;j<=w2;++j){
                if(word1[i-1]==word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else
                    dp[i][j] = min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
                    
            }
        }
        return dp[w1][w2];
    }
};

//solution_2 使用O(m)的空间，发现dp[i]只与dp[i-1]和dp[j-1]有关
class Solution {
/***

    可将空间压缩至使用O(N);
    解析：
    动态规划的本质-分解成子问题，明确子问题状态，明确状态转换
    设数组dp[i][j]为string s1(0-i-1)与 s2(0-j-1)最少Edit Distance;
    那么我们可以根据此推导下一步的Edit Distance 
    假设s1[i] == s2[j] 那么，该位置字符是相同的，不用进行Edit操作，有dp[i+1][j+1] = dp[i][j];
    
    那么不相等呢，考虑三种情况
    1. replacement , dp[i+1][j+1] = dp[i][j] +1,保证前面序列相同的情况下，取代s1[i]的字符可得到相同的string
    2. delete , 考虑删除操作，那么dp[i+1][j+1] = dp[i-1][j] +1,我们知道dp[i-1][j]表示的是上一串字符的Edit，那么我们只需要+1（delete）即可得到删除所需的Edit Distance;
    3. insert ,考虑插入一个字符，那么dp[i+1][j+1] = dp[i][j-1] +1,因为插入字符相当于0-i-1字符匹配的Edit Distance 加上该操作

***/
public:
    int minDistance(string word1, string word2) {
        int w1 = word1.size(),w2 = word2.size();
        vector<int> pre(w2+1,0);
        vector<int> cur(w2+1,0);
        for(int j=1;j<=w2;++j){
            pre[j] = j;
        }
        
        for(int i=1;i<=w1;++i){
            cur[0] = i;
            for(int j=1;j<=w2;++j){
                if(word1[i-1]==word2[j-1])
                    cur[j] = pre[j-1];
                else
                    cur[j] = min(pre[j-1],min(cur[j-1],pre[j]))+1;
            }
            pre = cur;
        }

        return pre[w2];//输出cur会出错
    }
};
