class MyCalendarTwo {
public:
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        int counter = 0;
        container.insert(start);
        container.insert(-end);
        auto travel = container.begin();
        while(travel != container.end() && *travel <= end) {
            if(*travel++ >= 0) {
                ++counter;
            }
            else{
                --counter;
            }
            if(counter >= 3) {
                container.erase(container.find(start));
                container.erase(container.find(-end));
                return false;
            }
        }
        return true;
    }
private:
    struct compare{
        bool operator()(const int& lhs, const int& rhs ) {
            if(abs(lhs) == abs(rhs)){
                return lhs < rhs;
            }
            return abs(lhs) < abs(rhs);
        }  
    };
    
    multiset<int, compare> container;
    
};

/***********************

    在CalendarTwo中调用Calendar,  即在Two中取出overlap的部分进行Calendar判断

***********************/

class MyCalendarTwo {    
public:
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
        MyCalendar calendar;
        for(pair<int, int> &p : container) {
            if(max(start, p.first) < min(end, p.second)) {
                pair<int, int> overlap = {max(start, p.first), min(end, p.second)};
                if(!calendar.book(overlap.first, overlap.second)) {
                    return false;
                }
            }
        }
        container.emplace_back(start, end);
        return true;
    }
    
private:
    vector<pair<int, int>> container;
    
    class MyCalendar {
        vector<pair<int, int>> books;
        public:
            bool book(int start, int end) {
                for (pair<int, int> p : books)
                    if (max(p.first, start) < min(end, p.second)) return false;
                books.push_back({start, end});
            return true;
        }
    };

};
