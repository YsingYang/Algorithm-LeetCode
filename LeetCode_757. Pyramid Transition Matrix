class Solution 
    /*****************
    
        对于每一层序列调用一次helper用于检测是否满足条件（只检测）
        在dfs函数中才采用递归的方式重组上一层序列
        
        
    ******************/
public:
    bool pyramidTransition(string bottom, vector<string>& allowed) {
        unordered_set<string> invalid;
        vector<vector<char>> edges(49);
        
        for(string& s : allowed) { // 候选集合中只有A, B, C, D, E, F, G
            int key = (s[0] - 'A') * 7 + s[1] - 'A';
            edges[key].push_back(s[2]);
        }
        return helper(invalid, bottom, edges);
    }
    
private:
    bool helper(unordered_set<string>& invalid, string& bottom, vector<vector<char>>& edges) {
        if(bottom.size() <= 1) 
            return true;
        if(invalid.find(bottom) != invalid.end()) 
            return false;
        int n = bottom.size();
        for(int i = 0; i < n - 1; ++i) { //check each candidate
            int key = (bottom[i]-'A') * 7 + bottom[i+1] - 'A';
            if(edges[key].empty()) {
                invalid.insert(bottom);
                return false;
            }
        }
        string path(n-1, 'A'); //下一个序列备选
        if(dfs(invalid, bottom, edges, path, 0))
            return true;
        invalid.insert(bottom); //不为true
        return false;
    }
    
    bool dfs(unordered_set<string>& invalid, string& bottom, vector<vector<char>>& edges, string& path, int index) {
        if(index+1 == bottom.size())
            return helper(invalid, path, edges);
        int key = (bottom[index]-'A') * 7 + bottom[index+1]-'A';
        for(char c : edges[key]) {
            path[index] = c;
            if(dfs(invalid, bottom, edges, path, index+1))
                return true;
        }
        return false;
    }
};
