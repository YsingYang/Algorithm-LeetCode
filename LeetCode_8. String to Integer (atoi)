//注意遇到非法的是返回前面合法的数字 ,而不是0

class Solution(object):
    def find_first_not_of_space(self,s):
        for i in range (len(s)):
            if s[i] != ' ' :
                return str(s[i:])
                
    def myAtoi(self, st):
        """
        :type str: str
        :rtype: int
        """
        s = self.find_first_not_of_space(st)
        s = str(s)
        if s == '':
            return 0
            
        index , flag , size = 0 , 1 , len(s)
        num = 0
        if s[index] == '+' or s[index] == '-':
            if s[index] == '-':
                flag = -1
            index += 1 
        
        while index < size:
            if s[index].isdigit():
                num = num * 10 + int(s[index])
            else:
                break
            index += 1
        
        if num >= 2**31 and flag == -1:
            return -2147483648 
        if num >= 2**31-1 and flag ==1:
            return 2**31-1
        
        return flag * num
            
#        s = st.lstrip()
#        去掉左空格的substr, rstrip()去掉右边空格 strip去掉空格左右空格
