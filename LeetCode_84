//my first solution got TLE in 1,2,3,4........10000
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        vector<int> st;
        st.push_back(-1);
        int res = 0;
        for(int i=0;i<heights.size();++i){
            res = max(res,heights[i]);//每次单独自己比较一次
            if(st.size()==1||heights[i]>=heights[st.back()]){
                if(st.size()>1){
                    res = max(res,heights[st.back()]*(i-st.back()));
                }
                st.push_back(i);
            }
            else if(st.size()>1&&heights[i]<heights[st.back()]){
                while(st.size()>1&&heights[i]<heights[st.back()]){
                    res = max(res,((i-st.back()+1)*heights[i]));
                    st.pop_back();
                }
                st.push_back(i);
            }
            int j=st.size()-2;
            if(j>0){
                for(;j>0;--j){
                    int height = heights[st[j]];
                    res = max(res,height*(st.back()-st[j-1]));
               // cout<<height<<"   ";
                //cout<<res<<"   "<<endl;
                }
            }
            else{
                res = max(res,heights[i]*(i-st[0]));
            }
        }
        return res;
    }
};

//看了discuss后让我感到很惭愧...其实跟实际答案仅有一点点差距了。。。。
//但是@sipiprotoss5 他有一点还是用的特别好的 下面有解释！
class Solution {
/***
 * 想法有点抽象，当heights[st.back()]>=heights[i]时，实际此时计算的并不是heights[i]围成的rectangle,而是heights[st.back()]与st.back() st.size()-2]间隔间的
 * rectangle,所以计算res = max(res,h*(i-idx-1));这里才会为i-idx-1,其实写正常点应该是i-1 - idx;
 * 
 * @sipiprotoss5这个人有个地方特别让我眼前一亮的感觉heights.push_back(0);，这里直接保证了最坏情况下也是O(n),
 * 到最后的时候，才把之前所有的在st中被仍未是短板的都计算一遍
 */
public:
    int largestRectangleArea(vector<int>& heights) {
        int res = 0;
        vector<int> st;
        heights.push_back(0);///!!!!从discuss中看到的，妈的眼前一亮的感觉！！！
        for(int i=0;i<heights.size();++i){
            while(st.size()>0&&heights[st.back()]>=heights[i]){
                int h = heights[st.back()];
                st.pop_back();
                int idx = st.empty()?-1:st.back();
                res = max(res,h*(i-idx-1));
            }
            st.push_back(i);
        }
        return res;
    }
};
