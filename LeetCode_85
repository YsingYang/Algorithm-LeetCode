class Solution {
/****
 * 该题其实相当于84题的抽象化，我们也因此可以用到84题的思想区解决
 * 对于每一次我们先统计他的height,即如果该层为1,那么heights[j] += 1,否则为0
 * ，统计完之后，我们相当于得到了该列的height,那么我们就可以用到84题计算相应的面积了
 * 
 * 总结以下，对于一些问题，我们可以抽象化成相似的问题去解决！
 * 
 */
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        int rs = matrix.size(),cs = matrix[0].size();
        vector<int> heights (cs+1,0);//将该题每一行抽象化为84. Largest Rectangle in Histogram
        int res = 0;
        for(int i=0;i<rs;++i){
            for(int j=0;j<cs;++j){
                heights[j] += (matrix[i][j]!='0'?1:-heights[j]);
            }
            //利用84题的思想计算
            vector<int> st;
            
           for(int j=0;j<cs+1;++j){
                while(st.size()>0&&heights[j]<=heights[st.back()]){
                    int h = heights[st.back()];
                    st.pop_back();
                    int idx = (st.empty()?-1:st.back());
                    res = max(res,(j-idx-1)*h);
                }
                st.push_back(j);
            }
        }
        return res;
    }
};
