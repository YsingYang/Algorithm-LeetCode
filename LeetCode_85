class Solution {
/****
 * 该题其实相当于84题的抽象化，我们也因此可以用到84题的思想区解决
 * 对于每一次我们先统计他的height,即如果该层为1,那么heights[j] += 1,否则为0
 * ，统计完之后，我们相当于得到了该列的height,那么我们就可以用到84题计算相应的面积了
 * 
 * 总结以下，对于一些问题，我们可以抽象化成相似的问题去解决！
 * 
 */
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        int rs = matrix.size(),cs = matrix[0].size();
        vector<int> heights (cs+1,0);//将该题每一行抽象化为84. Largest Rectangle in Histogram
        int res = 0;
        for(int i=0;i<rs;++i){
            for(int j=0;j<cs;++j){
                heights[j] += (matrix[i][j]!='0'?1:-heights[j]);
            }
            //利用84题的思想计算
            vector<int> st;
            
           for(int j=0;j<cs+1;++j){
                while(st.size()>0&&heights[j]<=heights[st.back()]){
                    int h = heights[st.back()];
                    st.pop_back();
                    int idx = (st.empty()?-1:st.back());
                    res = max(res,(j-idx-1)*h);
                }
                st.push_back(j);
            }
        }
        return res;
    }
};


class Solution {
/**
 * 还有一种用到了标准的dp算法，相当于每次都记录下left-boundary,right-boundary,但效率跟时间复杂度上感觉没有使用stack的快
 * 
 */
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        int rs = matrix.size(),cs = matrix[0].size();
        vector<int> left(cs,0),right(cs,cs),height(cs,0);
        int res = 0;
        for(int i=0;i<rs;++i){
            int curLeft = 0,curRight = cs;
            for(int j=0;j<cs;++j){
                if(matrix[i][j]=='1'){
                    ++height[j];
                    left[j] = max(left[j],curLeft);
                }
                else{
                    height[j] = 0;
                    left[j] = 0;//这两句还是有必要的，给下一行的做递推
                    curLeft = j+1;
                }
            }
            
            for(int j=cs-1;j>=0;--j){
                if(matrix[i][j]=='1'){
                    right[j] = min(right[j],curRight);
                }
                else{
                    right[j] = cs;////这两句还是有必要的，给下一行的做递推
                    curRight = j;
                }
            }
            
            for(int j=0;j<cs;++j){
                res = max(res,(right[j]-left[j])*height[j]);
            }
        }
        return res;
        
    }
};
