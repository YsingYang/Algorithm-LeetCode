class Solution {
/****
 * 基于memorization的深搜方法，注意其中的递归策略
 * 1. checkSubString(s1.substr(0,i),s2.substr(0,i),mp)&&checkSubString(s1.substr(i),s2.substr(i),mp)
 *    相当于比较s1[0..i-1],s2[0...i-1],与s1[i...size-1],s2[i...size-1]
 * 2. checkSubString(s1.substr(0,i),s2.substr(size1-i),mp)&&checkSubString(s1.substr(i),s2.substr(0,size1-i),mp)
 *    相当于比较s1[0...i-1],s2[size-i...size-1]!!!&&s1[i...size-1],s2[0,size-i];简单说就是长度相等的前段与后段，后段与前段
 * 
 * 
 */
public:
    bool isScramble(string s1, string s2) {
        unordered_map<string,bool> mp;
        return checkSubString(s1,s2,mp);
    }
    
    
    bool checkSubString(string s1,string s2,unordered_map<string,bool> &mp){
        int size1 = s1.size(),size2 = s2.size();
        if(size1!=size2)
            return false;
        string tmp = s1 + s2;
        if(mp.find(tmp)!=mp.end()){
            return mp[tmp];
        }
        bool res = false;
        if(s1==s2)
            res = true;
        else{
            for(int i=1;i<size1&&!res;++i){
         //       cout<<s1.substr(0,i)<<"    "<<s1.substr(i)<<endl;
                res |=checkSubString(s1.substr(0,i),s2.substr(0,i),mp)&&checkSubString(s1.substr(i),s2.substr(i),mp);
                res |=checkSubString(s1.substr(0,i),s2.substr(size1-i),mp)&&checkSubString(s1.substr(i),s2.substr(0,size1-i),mp); 
            }
        }
        //cout<<s1<<"    "<<s2<<"    "<<"  res  "<<(int)res<<endl;
        mp[tmp] = res;
        return res;
    }  
};
class Solution {
/****
 * 基于3D的DP策略..其中x为长度，即选中自问题的substr长度
 * y为s1string ,z为s2string
 * 其中dp[len][i][j]表示的是对于string s[i...i+len-1]与s2[j...j+len-1]是否为scramble string
 * 那么我们联想DFS的递归方法dp[len][i][j]  |= (dp[k][i][j] && dp[len-k][i+k][j+k])当且仅当两串字符都相等时才成立
 * 
 *  dp[len][i][j]  |= dp[k][i+len-k][j] && dp[len-k][i][j+k]) 相当于前后穿的分别对比
 *    s1[i+len-k...i+len]==s2[j..j+k-1]  && s1[i...i+len-k]==s1[j+k...j+len-1]..有点复杂。。。
 * 
 * 
 */
public:
    bool isScramble(string s1, string s2) {
        int sSize = s1.size(), len, i, j, k;
        if(0==sSize) return true;
        if(1==sSize) return s1==s2;
        bool isS[sSize+1][sSize][sSize];

        for(i=0; i<sSize; ++i)
            for(j=0; j<sSize; ++j)
                isS[1][i][j] = s1[i] == s2[j];
                
        for(len=2; len <=sSize; ++len)
            for(i=0; i<=sSize-len; ++i)
                for(j=0; j<=sSize-len; ++j)
                {
                    isS[len][i][j] = false;
                        for(k=1; k<len && !isS[len][i][j]; ++k)
                        {
                            isS[len][i][j] = isS[len][i][j] || (isS[k][i][j] && isS[len-k][i+k][j+k]);
                            isS[len][i][j] = isS[len][i][j] || (isS[k][i+len-k][j] && isS[len-k][i][j+k]);
                        }
                }
        return isS[sSize][0][0];            

    }
}; 

