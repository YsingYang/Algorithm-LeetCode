class Queue {
    stack<int> st;
    stack<int> temp;
public:
    // Push element x to the back of queue.
    void push(int x) {
            while(!st.empty()){
                temp.push(st.top());
                st.pop();
            }
            st.push(x);
            while(!temp.empty()){
                st.push(temp.top());
                temp.pop();
            }
    }

    // Removes the element from in front of queue.
    void pop(void) {
        if(st.empty())
            return ;
        st.pop();
    }

    // Get the front element.
    int peek(void) {
        return st.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return st.empty()? true:false;
    }
};
/*before I saw Stefanpochmann solution,I consider It's not convenient  for keeping output stack before push(),
  For example:input stack 1,2,3,4,5 we could get output stack 5 4 3 2 1.so I had ignored the if(output.empty()) to 
  figure out rebuild output_stack after push();
*/

//StefanPochmann Solution 
class Queue {
    stack<int> input, output;
public:

    void push(int x) {
        input.push(x);
    }

    void pop(void) {
        peek();
        output.pop();
    }

    int peek(void) {
        if (output.empty())
            while (input.size())
                output.push(input.top()), input.pop();
        return output.top();
    }

    bool empty(void) {
        return input.empty() && output.empty();
    }
};
