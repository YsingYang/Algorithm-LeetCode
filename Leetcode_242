/*
  first Solution use unordered_map<char,int>
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        unordered_map<char,int> hash;
        if(s.size()!=t.size())  return false;
        for(int i=0;i<s.size();++i){
            ++hash[s[i]];
            --hash[t[i]];
        }
        for (auto count : hash)
            if (count.second) return false;
        return true;
    }
};

/*
  second implement use vector<int> (26,0).Although unordered_map and vector take O(1)time for searching and inserting,vector is faster
  than unordered_map
*/
class Solution {
public:
    bool isAnagram(string s, string t) {
        vector<int>count(26,0);
        if(s.size()!=t.size())  return false;
        for(int i=0;i<s.size();++i){
            ++count[s[i]-'a'];
            --count[t[i]-'a'];
        }
        for(int i=0;i<26;++i)
            if(count[i]!=0)
                return false;
        return true;
    }
};

/*
  if this two string are Anagram,after sort them,they can be same.however, it obviously spend more time;
  thanks for  @StefanPochmann  take a little improvement in it:Sorting can be made a bit faster, this takes 48 ms:
*/ 

bool isAnagram(string s, string t) { 
    sort((char*)s.c_str(), (char*)s.c_str() + s.size());
    sort((char*)t.c_str(), (char*)t.c_str() + t.size());
    return s == t; 
}
