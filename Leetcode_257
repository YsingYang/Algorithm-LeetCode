//dfs
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        string s;
        if(root)
            dfs_search(root,res,s);
        return res;
    }
    void dfs_search(TreeNode* root,vector<string> &res,string s){
        if(!(root->left)&&!(root->right)){
            res.push_back(s+to_string(root->val));
            return;
        }
        if(root->left)  dfs_search(root->left,res,s+to_string(root->val)+"->");
        if(root->right) dfs_search(root->right,res,s+to_string(root->val)+"->");
    }
};

//another dfs,is it like divide and conquer?,BTW,you can merge two loop.
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(!root)    return res;
        if(!root->left&&!root->right){
            res.push_back(to_string(root->val));
            return res;   
        }
        vector<string> ls1,ls2;
        if(root->left)  ls1=binaryTreePaths(root->left);
        if(root->right) ls2=binaryTreePaths(root->right);
        for(int i=0;i<ls1.size();++i){
            res.push_back(to_string(root->val)+"->"+ls1[i]);
        }
        for(int i=0;i<ls2.size();++i){
            res.push_back(to_string(root->val)+"->"+ls2[i]);
        }
        return res;
    }
};
